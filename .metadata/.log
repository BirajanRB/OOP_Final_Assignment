!SESSION 2023-05-02 20:14:57.658 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.bak_0.log
Created Time: 2023-05-02 22:03:26.037

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-05-02 22:03:26.038
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-05-02 22:03:26.038
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-02 22:03:26.923
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package graphicsProgramFinalAssignmentOOP;

import uk.ac.leedsbeckett.oop.LBUGraphics;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;


import java.util.ArrayList;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;

import java.util.Random;


public class GraphicsSystem extends LBUGraphics
{	
	//save counter
	private boolean saveCounter = true;
	
	//Command Entered Buffer
	private StringBuffer strBufferObj = new StringBuffer();
	
	//RGB mode counter
	private boolean rgbModeBool = false;
	
	public static void main(String[] args)
	{
		new GraphicsSystem();
	}
	
	
	public GraphicsSystem()
	{
        JFrame MainFrame = new JFrame();           
        MainFrame.setLayout(new FlowLayout());    
        MainFrame.add(this);                       
        MainFrame.setSize(850,450);               
        MainFrame.setVisible(true);   
        MainFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        MainFrame.addWindowListener(new WindowListenerClass());
        
        
        //about();
        reset();
        penDown();
	}
	

	
	public void about()
	{
		//overriding the about method.
	
		try
		{
			File loadImage = new File("name.png");
			BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
			setBufferedImage(bufferedImageObjLoad);
			
			System.out.println(1+2+"="+1+2);
		}
		catch(Exception e)
		{
			displayMessage("Error loading Name");
		}
		
		//calling the parent class about method.
		super.about();

	}
	
	public void square(int length)
	{	
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}

	}
	
	public void squareCentered(int length)
	{	
		//initial position.
		int xPos = getxPos();
		int yPos = getyPos();
		
		
		reset();
		forward(length/2);
		turnRight();
		forward(length/2);
		turnLeft();
		
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}
		
		//going back to the original position after this command has been issued.
		setxPos(xPos);
		setyPos(yPos);
		
		//fixing teleport issues.
		penUp();
		forward(0);
		penDown();
	}
	
	
	public void penColour(int colourR, int colourG, int colourB)
	{
		try
		{
			Color c = new Color(colourR,colourG,colourB);
			setPenColour(c);
		}
		catch(Exception e)
		{
			//In case our of bound arguments are given.
			displayMessage("Color parameter outside of expected range: Red:255 Green:255 Blue:255");
		}
	}
	
	
	public void penWidth(int width)
	{
		setStroke(width);
	}
	
	public void triangle(int length)
	{
		//Draws a triangle with equal sides.
		turnLeft();
		penDown();
			
		int i;
		for(i=0;i<3;i++)
		{
			
			forward(length);
			
			if(i<2)
			{
				turnLeft(120);
			}
			
		}
	}
	
	
	public void triangle(int lengthOne, int lengthTwo, int lengthThree)
	{	
		//overloading triangle function.
		//Draws a triangle with specific sides.
	
		double a,b,largestLengthC,angleA,angleB,angleC;
		
		if(lengthOne>lengthTwo && lengthOne>lengthThree)
		{
			//case where lengthOne is the largest
			
			a = lengthTwo;
			b = lengthThree;
			
			largestLengthC = lengthOne;
			
		}
		else if(lengthTwo>lengthOne && lengthTwo>lengthThree)
		{
			//case where lengthTwo is the largest
			a = lengthOne;
			b = lengthThree;
			
			largestLengthC = lengthTwo;
		}
		else
		{	
			//case where lengthThree is the largest
			a = lengthOne;
			b = lengthTwo;
			
			largestLengthC = lengthThree;
		}
		
				
		//Using Cosine Law to find the largest angle vai the longest side.
		//c^2 = a^2 + b^2 -2*a*b*Cos(angle)
		//Cos(angle) =  -(c^2 - (a^2+b^2)) / 2ab
		//angle = cos*-1( -(c^2 - (a^2+b^2)) / 2ab) )
		double value;
		value = -(Math.pow(largestLengthC, 2) - ( Math.pow(a, 2) + Math.pow(b, 2))) /(2*a*b) ;
		angleC = Math.toDegrees(Math.acos(value)); // returns the angleC degree
		
		//using Sine Law to find the other angles.
		//sideA/sinA = sideB/sinB = sideC/sinC
		//A = (sin(c)*a/c)sin^-1
		//B = (sin(c)*b/c)sin^-1
		angleA = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (a/largestLengthC) ) );
		angleB = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (b/largestLengthC) ) );
		
		turnLeft();
		forward((int) largestLengthC);
		
		turnLeft(180 - (int) angleB);
		forward((int) a);
		
		turnLeft(180 - (int) angleC );
		forward((int) b);
		
		turnLeft(180 - (int) angleA);
		
	}
	
	public void hexagram(int length)
	{
		//Heron's formula 
		//s = (a+b+c)/2
		//a = sq(s(s-a)(s-b)(s-c))
		int s = (length+length+lenght)/2;
		areaOfTriangle = s*(s-length)(s-length)(s-length))
		
				
		
		triangle(length);
		turnLeft(180);
		triangle(length);
	}
	
	public void rgbModeOn()
	{
		int[] rgbValue = {255,255,255};
		Random randObj = new Random();
		
		rgbModeBool = true;
		
		//Loops through the RGB value until RGB mode is turned off.
		while(rgbModeBool == true)
		{
			int i = randObj.nextInt(0,3);
			
			if(rgbValue[i] == 255)
			{
				while(rgbValue[i] > 0)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					--rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 	
					catch (InterruptedException e) 
					{
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
			else if(rgbValue[i]==0)
			{
				while(rgbValue[i] < 255)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					++rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 
					catch (InterruptedException e) 
					{
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
		}
		
	}
	
	public void rgbModeOff()
	{
		//Turns off RGB mode.
		rgbModeBool = false;
	}
	
	
	public void processCommand(String command)
	{	
		
		//Prints the Command Entered.
		displayMessage("Command Entered: "+command);
		
		//Splitting Entered Command into An array of String objects.
		String[] commandEntered = command.split(" ");
		
		//Method parameter values.
		int[] enteredParameterValue = new int[3];
		
		
		//Array of accepted commands.
		String[] commandCollection = {"about","penup","pendown","turnleft","turnright","forward","backward","black","green","red","white","reset","clear","save","load","square","squarecentered","pencolour","penwidth","triangle","hexagram","rgbmodeon","rgbmodeoff"};
		
		//Collection Class ArrayList for accepted commands.
		ArrayList acceptedCommandCollection = new ArrayList();
		
		for(String i: commandCollection)
		{	
			//Adding Accepted Commands
			acceptedCommandCollection.add(i);
		}
		
		
		//Command validation is done first.
		//parameter validation is done second.
		if(acceptedCommandCollection.contains(commandEntered[0].toLowerCase()))
		{
			//Valid Command Case.
			
			//Case where too many parameters are entered.
			if(commandEntered.length>4)
			{	
				displayMessage("Too many parameters entered.");
				
				//Ends function Execution in case of error.
				return;
			}
			
			//Parameter Filtering & conversion.
			switch(commandEntered.length)
			{		
				case 2:
					//One parameter Case
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
					
				case 3:
					//two parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
								
				case 4:	
					//Three parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
						enteredParameterValue[2] = Integer.parseInt(commandEntered[3]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0 || enteredParameterValue[2]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;		
			}
			
			
			
			//Command filtering.
			switch(commandEntered[0].toLowerCase())
			{
				case "about":
					about();
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "reset":
					reset();
					penColour(255,0,0);	
					break;
					
				case "penup":
					penUp();
					break;
					
				case "pendown":
					penDown();
					break;
					
				case "turnleft":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnLeft(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnLeft();
					}
					break;
					
				case "turnright":
					
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnRight(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnRight();
					}				
					break;
					
				case "forward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "backward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]-(enteredParameterValue[0]*2));
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "black":					
					//Sets pen color to black.
					setPenColour(Color.black);
					break;
					
				case "green":
					//Sets pen color to green.
					setPenColour(Color.green);
					break;
					
				case "red":				
					//Sets pen color to red.
					setPenColour(Color.red);			
					break;
					
				case "white":
					//Sets pen color to white.
					setPenColour(Color.white);					
					break;
					
				case "clear":
					//Clears the display
					clear();
					
					//save counter True to symbolize saved status.
					saveCounter = true;
					break;
					
				case "save":
					try
					{
						//Save Image
						File savedImage = new File("savedImage.png");
						BufferedImage bufferedImageObjSave  = getBufferedImage();
						ImageIO.write(bufferedImageObjSave,"png", savedImage);
						
						//Saves Command
						File savedCommand = new File("savedCommand.txt");
						FileWriter fWriterObj = new FileWriter(savedCommand);
						BufferedWriter bWriterObj = new BufferedWriter(fWriterObj);
						bWriterObj.write(strBufferObj.toString());
						bWriterObj.close();
						
						//Clears the String buffer after each save.
						strBufferObj.delete(0,strBufferObj.length());
						
						//save counter True to symbolize saved status.
						saveCounter = true;
						
						//returns statement to avoid being added to the string command buffer
						return;						
					}
					catch(Exception e)
					{
						displayMessage("Error Saving Image");
					}	
					break;
					
				case "load":
					
					if(saveCounter == true)
					{
						try
						{	
							//reset turtle position.
							reset();
							penDown();
							
							//Load Image
							File loadImage = new File("savedImage.png");
							BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
							setBufferedImage(bufferedImageObjLoad);
							
							
							//load Saved Commands.
							File savedCommand = new File("savedCommand.txt");
							FileReader fReaderObj = new FileReader(savedCommand);
							BufferedReader bReaderObj = new BufferedReader(fReaderObj);
													
							String line = bReaderObj.readLine(); //reads the first line of command file.
							while(line != null)
							{	
								processCommand(line);
								line = bReaderObj.readLine();
							}
							bReaderObj.close();
							
							//save counter True to symbolize saved status.
							saveCounter = true;
							
							//returns statement to avoid being added to the string command buffer
							return;
						}
						catch(Exception e)
						{
							displayMessage("Error Loading Image");
						}
					}
					else
					{	
						//Non-Saved image case.
						displayMessage("Current image/commands is not saved!");
						
						//returns statement to avoid being added to the string command buffer
						return;
					}
					break;
					
					
				case "square":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						square(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "squarecentered":
					//Centered version of square method.
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						squareCentered(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "pencolour":
					if(commandEntered.length==4)
					{
						//Case where parameter is given - command + value.
						penColour(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;
					
					
				case "penwidth":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						penWidth(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;	
					
					
				case "triangle":
					if(commandEntered.length == 2)
					{
						//Case where one parameter is given - command + value.
						triangle(enteredParameterValue[0]);
					}
					else if(commandEntered.length == 4)
					{
						//Case where three parameter are given - command + parameter list.
						triangle(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "hexagram":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						hexagram(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "rgbmodeon":
					rgbModeOn();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
					
				case "rgbmodeoff":
					rgbModeOff();
					break;
					
			}
			
		}
		else
		{	
			//invalid Command Case.
			displayMessage("Invalid Command.");
		}
		
		
		//Commands Entered into string buffer
		strBufferObj.append(command+"\n");
		
	}
	
	
	
	//inner class
	//Adapter class of the WindowListener Interface
	private class WindowListenerClass extends WindowAdapter
	{

		public void windowClosing(WindowEvent event)
		{
			
			if(saveCounter == true)
			{
				event.getWindow().dispose();
			}
			else
			{
				int result = JOptionPane.showConfirmDialog(null, "The current image is not saved, do you wish to exit?");
				
				if(result == JOptionPane.YES_OPTION)
				{
					event.getWindow().dispose();
				}
			}
			
		}

	}
	
	
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-05-02 22:03:26.924
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-05-02 22:03:26.924
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2023-05-03 12:30:24.302 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-03 12:30:26.897
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-03 12:30:31.680
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-03 12:30:36.792
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-03 12:30:36.792
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-03 12:30:36.792
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-03 12:30:40.281
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-04 13:11:28.670 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-04 13:11:31.507
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-04 13:11:45.539
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-04 13:11:50.894
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-04 13:11:50.894
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-04 13:11:50.894
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-04 13:11:54.267
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-04 19:29:23.545 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-04 19:29:25.869
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-04 19:29:31.805
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-04 19:29:36.406
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-04 19:29:36.406
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-04 19:29:36.406
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-04 19:29:39.759
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-04 20:34:11.701 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-04 20:34:12.547
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-04 20:34:15.284
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-04 20:34:16.468
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-04 20:34:16.468
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-04 20:34:16.468
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-04 20:34:18.900
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-05 00:02:25.797 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-05 00:02:28.219
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-05 00:02:31.940
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-05 00:02:36.903
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-05 00:02:36.903
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-05 00:02:36.903
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-05 00:02:40.221
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.ui 4 2 2023-05-05 00:12:31.536
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalStateException: null is not part of a compilation unit or class file
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:845)
	at org.eclipse.jdt.core.dom.ASTParser.createBindings(ASTParser.java:1112)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.addSimilarTypeProposals(UnresolvedElementsSubProcessor.java:900)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.getTypeProposals(UnresolvedElementsSubProcessor.java:683)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:424)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:361)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:115)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
!SESSION 2023-05-05 01:17:00.981 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-05 01:17:01.786
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-05 01:17:04.152
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-05 01:17:05.291
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-05 01:17:05.291
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-05 01:17:05.291
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-05 01:17:07.786
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-05 03:32:01.342 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-05 03:32:02.138
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-05 03:32:04.611
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-05 03:32:05.673
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-05 03:32:05.673
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-05 03:32:05.673
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-05 03:32:07.207
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-05 12:12:12.048 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-05 12:12:14.522
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-05 12:12:23.602
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-05 12:12:28.215
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-05 12:12:28.215
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-05 12:12:28.215
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-05 12:12:31.532
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-05 16:25:31.510 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-05 16:25:32.500
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-05 16:25:34.736
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-05 16:25:35.971
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-05 16:25:35.971
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-05 16:25:35.971
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-05 16:25:38.995
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-05 18:47:13.306 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-05 18:47:15.533
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-05 18:47:18.601
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-05 18:47:23.043
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-05 18:47:23.043
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-05 18:47:23.043
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-05 18:47:24.917
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-06 15:19:37.167 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-06 15:19:39.680
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-06 15:19:44.564
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-06 15:19:50.910
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-06 15:19:50.910
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-06 15:19:50.910
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-06 15:19:54.530
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-06 18:42:56.240 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-06 18:42:58.670
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-06 18:44:25.947
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-06 18:44:30.569
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-06 18:44:30.569
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-06 18:44:30.569
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-06 18:44:33.692
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-07 00:43:25.989 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-07 00:43:26.958
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-07 00:43:30.070
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-07 00:43:31.284
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-07 00:43:31.285
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-07 00:43:31.285
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-07 00:43:34.318
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-07 00:48:44.944 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-07 00:48:45.788
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-07 00:48:47.458
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-07 00:48:48.731
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-07 00:48:48.731
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-07 00:48:48.731
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-07 00:48:51.454
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-07 13:25:26.204 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-07 13:25:28.639
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-07 13:25:33.273
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-07 13:25:38.113
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-07 13:25:38.113
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-07 13:25:38.113
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-07 13:25:41.380
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-07 16:43:32.091 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-07 16:43:34.437
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-07 16:43:48.233
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-07 16:43:53.117
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-07 16:43:53.117
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-07 16:43:53.117
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-07 16:43:56.185
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-07 17:39:40.441 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-07 17:39:42.941
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-07 17:39:47.227
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-07 17:39:52.406
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-07 17:39:52.406
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-07 17:39:52.406
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-07 17:39:55.825
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-07 18:14:30.807 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-07 18:14:31.585
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-07 18:14:34.753
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-07 18:14:35.871
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-07 18:14:35.872
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-07 18:14:35.872
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-07 18:14:38.555
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-08 02:38:19.893 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-08 02:38:23.296
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-08 02:38:28.460
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-08 02:38:35.355
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-08 02:38:35.355
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-08 02:38:35.355
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-08 02:38:39.631
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-08 20:21:27.834 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-08 20:21:30.708
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-08 20:21:34.595
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-08 20:21:40.389
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-08 20:21:40.389
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-08 20:21:40.389
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-08 20:21:44.231
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-09 03:55:16.655 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-09 03:55:19.482
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-09 03:56:41.540
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-09 03:56:46.843
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-09 03:56:46.844
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-09 03:56:46.844
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-09 03:56:50.250
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-10 19:08:22.889 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-10 19:08:25.386
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-10 19:08:29.951
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-10 19:08:34.907
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 19:08:34.907
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 19:08:34.907
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-10 19:08:38.415
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-10 21:31:20.338 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-10 21:31:21.557
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-10 21:31:26.093
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-10 21:31:27.759
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 21:31:27.760
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 21:31:27.760
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-10 21:31:31.958
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-10 22:00:53.617 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-10 22:00:54.438
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-10 22:01:28.277
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-10 22:01:29.429
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 22:01:29.429
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-10 22:01:29.429
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-10 22:01:32.067
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-11 02:01:10.956 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-11 02:01:11.964
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-11 02:02:40.024
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-11 02:02:41.322
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-11 02:02:41.322
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-11 02:02:41.322
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-11 02:02:44.441
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2023-05-11 05:04:28.238
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package graphicsProgramFinalAssignmentOOP;

import uk.ac.leedsbeckett.oop.LBUGraphics;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.*;
import java.awt.Dimension;
import java.awt.Graphics;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JOptionPane;
import javax.swing.JColorChooser;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.util.ArrayList;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;

import java.util.Random;

import java.sql.DriverManager;
import java.sql.Connection;


public class GraphicsSystem extends LBUGraphics
{	
	//Array of accepted commands.
	private String[] commandCollection = {"about","penup","pendown","turnleft","turnright","forward","backward","black","green","red","white","reset","clear","save","load","square","squarecentered","pencolour","penwidth","triangle","hexagram","hexagon","octagram","octagon","circle","rgbmodeon","rgbmodeoff","colorchooser","mousemodeon","mousemodeoff","help","tictactoe","tictactoeexit"};
	
	//save counter
	private boolean saveCounter = true;
	
	//Command Entered Buffer
	private StringBuffer strBufferObj = new StringBuffer();
	
	//RGB mode counter
	private boolean rgbModeBool = false;
	
	//Help menu
	private JFrame helpWindow;
	private JSlider rValue,gValue,bValue;
	private JPanel currentColor;
	
	//mouse mode counter
	private boolean mouseModeBool = false;
	
	//Tic Tac Toe - game mode one or off
	private boolean ticTacToeBoolean = false;
	
	//ticTacToe box occupied counter
	private boolean[] ticTacToeBox = new boolean[9];
	
	//ticTacToe Box occupied player
	private char[] ticTacToeBoxOwner = new char[9];
	
	//Player Turn
	//cross = x
	//circle = o
	//initial turn for circle
	private char turn = 'o';

	public static void main(String[] args)
	{
		try
		{
			//register driver.
			Class.forName("com.mysql.cj.jdbc.Driver");
			//establishing connection to check for Database availability.
			Connection co = DriverManager.getConnection("jdbc:mysql://localhost:3306/turtlegraphicdata","root","");
			//closing test connection.
			co.close();
			
			//Database login 
			new DatabaseLogin();
			
		}
		catch(Exception e)
		{
			//database link failure - automatically opens turtleGraphic.
			new GraphicsSystem();
		}


	}
	
	
	public GraphicsSystem()
	{
        JFrame MainFrame = new JFrame(); 
        MainFrame.setLocation(20,20);
        MainFrame.setLayout(new FlowLayout());    
        MainFrame.add(this);                       
        MainFrame.setSize(850,450);               
        MainFrame.setVisible(true);   
        MainFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        MainFrame.addWindowListener(new WindowListenerClass());
        MainFrame.addMouseMotionListener(new MouseMotionListenerClass());
        MainFrame.addMouseListener(new MouseListenerClass());
        
        
        //about();
        reset();
        penDown();
	}

	
	public void about()
	{
		//overriding the about method.
	
		try
		{
			File loadImage = new File("name.png");
			BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
			setBufferedImage(bufferedImageObjLoad);
		}
		catch(Exception e)
		{
			displayMessage("Error loading Name");
		}
		
		//calling the parent class about method.
		super.about();

	}
	
	public void square(int length)
	{	
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}

	}
	
	public void squareCentered(int length)
	{	
		//initial position.
		int xPos = getxPos();
		int yPos = getyPos();
		
		
		reset();
		forward(length/2);
		turnRight();
		forward(length/2);
		turnLeft();
		
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}
		
		//going back to the original position after this command has been issued.
		setxPos(xPos);
		setyPos(yPos);
		
		//fixing teleport issues.
		penUp();
		forward(0);
		penDown();
	}
	
	
	public void penColour(int colourR, int colourG, int colourB)
	{
		try
		{
			Color c = new Color(colourR,colourG,colourB);
			setPenColour(c);
		}
		catch(Exception e)
		{
			//In case our of bound arguments are given.
			displayMessage("Color parameter outside of expected range: Red:255 Green:255 Blue:255");
		}
	}
	
	
	public void penWidth(int width)
	{
		setStroke(width);
	}
	
	public void triangle(int length)
	{
		//Draws a triangle with equal sides.
		turnLeft();
		penDown();
			
		int i;
		for(i=0;i<3;i++)
		{
			
			forward(length);
			
			if(i<2)
			{
				turnLeft(120);
			}
			
		}
	}
	
	
	public void triangle(int lengthOne, int lengthTwo, int lengthThree)
	{	
		//overloading triangle function.
		//Draws a triangle with specific sides.
	
		double a,b,largestLengthC,angleA,angleB,angleC;
		
		if(lengthOne>lengthTwo && lengthOne>lengthThree)
		{
			//case where lengthOne is the largest
			
			a = lengthTwo;
			b = lengthThree;
			
			largestLengthC = lengthOne;
			
		}
		else if(lengthTwo>lengthOne && lengthTwo>lengthThree)
		{
			//case where lengthTwo is the largest
			a = lengthOne;
			b = lengthThree;
			
			largestLengthC = lengthTwo;
		}
		else
		{	
			//case where lengthThree is the largest
			a = lengthOne;
			b = lengthTwo;
			
			largestLengthC = lengthThree;
		}
		
				
		//Using Cosine Law to find the largest angle vai the longest side.
		//c^2 = a^2 + b^2 -2*a*b*Cos(angle)
		//Cos(angle) =  -(c^2 - (a^2+b^2)) / 2ab
		//angle = cos*-1( -(c^2 - (a^2+b^2)) / 2ab) )
		double value;
		value = -(Math.pow(largestLengthC, 2) - ( Math.pow(a, 2) + Math.pow(b, 2))) /(2*a*b) ;
		angleC = Math.toDegrees(Math.acos(value)); // returns the angleC degree
		
		//using Sine Law to find the other angles.
		//sideA/sinA = sideB/sinB = sideC/sinC
		//A = (sin(c)*a/c)sin^-1
		//B = (sin(c)*b/c)sin^-1
		angleA = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (a/largestLengthC) ) );
		angleB = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (b/largestLengthC) ) );
		
		turnLeft();
		forward((int) largestLengthC);
		
		turnLeft(180 - (int) angleB);
		forward((int) a);
		
		turnLeft(180 - (int) angleC );
		forward((int) b);
		
		turnLeft(180 - (int) angleA);
		
	}
	
	public void hexagram(int length)
	{
		//Heron's formula 
		//s = (a+b+c)/2
		//a = sq(s(s-a)(s-b)(s-c))
		double s = (length+length+length)/2;
		double areaOfTriangle = Math.sqrt(s*((s-length)*(s-length)*(s-length)));
		
		//h=(2*A)/b
		//can also be said to be the median
		double heightOfTriangle = (2*areaOfTriangle)/length;
		
		//the distance between the vertex and the centroid of a triangle is 2/3 of the median of the triangle.
		int midPoint = (int) (heightOfTriangle/3)*2;	
		
		triangle(length);
		turnLeft(120);
		turnLeft(30);
		penUp();
		forward((int) midPoint);
		forward((int) midPoint);
		penDown();
		turnLeft(150);
		forward(length);
		turnLeft(120);
		forward(length);
		turnLeft(120);
		forward(length);
	}
	
	public void hexagon(int length)
	{
		turnLeft();
		penDown();
		
		for(int i=0;i<=5;i++)
		{
			forward(length);
			turnLeft(60);
		}

	}
	
	public void octagram(int length)
	{
		square(length);
		
		//fixing position for 2nd sqaure.
		penUp();
		turnLeft();
		forward(length/2);
		turnLeft();
		forward(length/2);
		turnLeft(45);
		forward(length/2);
		turnLeft();
		forward(length/2);
		
		square(length);
	}
	
	public void octagon(int length)
	{
		turnLeft();
		penDown();
		
		for(int i=0;i<=7;i++)
		{
			forward(length);
			turnLeft(45);
		}
	}
	
	public void rgbModeOn()
	{
		int[] rgbValue = {255,255,255};
		Random randObj = new Random();
		
		rgbModeBool = true;
		
		//Loops through the RGB value until RGB mode is turned off.
		while(rgbModeBool == true)
		{
			int i = randObj.nextInt(0,3);
			
			if(rgbValue[i] == 255)
			{
				while(rgbValue[i] > 0)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					
					try
					{
						//Updates Help UI
						currentColor.setBackground(getPenColour());
					}
					catch(Exception e)
					{
						//In case Help UI is not visible
					}

					--rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 	
					catch (InterruptedException e) 
					{
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
			else if(rgbValue[i]==0)
			{
				while(rgbValue[i] < 255)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					
					try
					{
						//Updates Help UI
						currentColor.setBackground(getPenColour());
					}
					catch(Exception e)
					{
						//In case Help UI is not visible
					}
					
					++rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 
					catch (InterruptedException e) 
					{
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
		}
		
	}
	
	public void rgbModeOff()
	{
		//Turns off RGB mode.
		rgbModeBool = false;
	}
	
	public void colorChooser()
	{
		Color newColor = JColorChooser.showDialog(null,"Choose Color", getPenColour());
		setPenColour(newColor);
		
		try
		{
			//Updates Help UI 
			currentColor.setBackground(getPenColour());
		}
		catch(Exception e)
		{
			//Does noting if Help window is not opened
		}
	}
	
	public void Help()
	{
		
		try
		{	
			//closes Help window if it already exists
			helpWindow.dispose();
		}
		catch(Exception e)
		{
			
		}
		
		//Help window MainFrame
		helpWindow = new JFrame("Help Window");
		helpWindow.setLocation(860,20);
		helpWindow.setVisible(true);
		helpWindow.setSize(600,600);
		helpWindow.setLayout(new FlowLayout());
		helpWindow.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		helpWindow.addWindowListener(new HelpWindowListenerClass());
		
		//command list panel
		JPanel commandList = new JPanel();
		commandList.setPreferredSize(new Dimension(200,600));
		commandList.setLayout(new BoxLayout(commandList,BoxLayout.Y_AXIS));
		
		//an Array of JLabel class references
		JLabel[] commandAvailable = new JLabel[commandCollection.length];
		
		for(int i=0;i<commandCollection.length;i++)
		{
			//referencing each reference variable with an JLabel object.
			//Specifies each JLabel object with Command names.
			commandAvailable[i] = new JLabel();
			commandAvailable[i].setText(i+1+". "+commandCollection[i]);
			commandAvailable[i].setPreferredSize(new Dimension(200,50));
			
			//adds each JLabel object into commandList panel, one by one.
			commandList.add(commandAvailable[i]);
		}
		
		
		//UI panel
		JPanel helpUI = new JPanel();
		helpUI.setPreferredSize(new Dimension(400,600));
		helpUI.setLayout(new BoxLayout(helpUI,BoxLayout.Y_AXIS));
		
		//RGB value slider
		rValue = new JSlider(JSlider.HORIZONTAL,0,255,255);
		rValue.setPaintTicks(true);
		rValue.setPaintLabels(true);
		rValue.setMajorTickSpacing(51);
		rValue.addChangeListener(new SliderListenerClass());
		
		gValue = new JSlider(JSlider.HORIZONTAL,0,255,0);
		gValue.setPaintTicks(true);
		gValue.setPaintLabels(true);
		gValue.setMajorTickSpacing(51);
		gValue.addChangeListener(new SliderListenerClass());
		
		bValue = new JSlider(JSlider.HORIZONTAL,0,255,0);
		bValue.setPaintTicks(true);
		bValue.setPaintLabels(true);
		bValue.setMajorTickSpacing(51);
		bValue.addChangeListener(new SliderListenerClass());
		
		//adding sliders into HelpUI panel
		helpUI.add(new JLabel("R"));
		helpUI.add(rValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		helpUI.add(new JLabel("G"));
		helpUI.add(gValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		helpUI.add(new JLabel("B"));
		helpUI.add(bValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		
		//CurrentColor checker
		currentColor = new JPanel();
		currentColor.setPreferredSize(new Dimension(50,50));
		currentColor.setBackground(getPenColour());
		currentColor.setBorder(BorderFactory.createLoweredBevelBorder());
		
		//adding current color panel to helpUI panel
		helpUI.add(currentColor);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		//Adding helpUI & commandList panels into the Main frame
		helpWindow.getContentPane().add(commandList);
		helpWindow.getContentPane().add(helpUI);
		helpWindow.pack();
	}
	
	public void ticTacToe()
	{
		clear();
		
		//indicating the game is called.
		ticTacToeBoolean = true;
		
		for(int i=0;i<ticTacToeBox.length;i++)
		{
			//setting all ticTacToeBox references false for initial game starting
			//indicates weather it is occupied or not.
			ticTacToeBox[i] = false;
		}
		
		for(int i=0;i<ticTacToeBoxOwner.length;i++)
		{
			//setting all ticTacToeBoxOwner references as null-'n' for initial game starting.
			ticTacToeBoxOwner[i] = 'n';
		}
		
		penDown();
		penWidth(6);
		setPenColour(Color.white);
		//each position area is of 100*100
		
		//vertical line
		setxPos(300);
		setyPos(50);
		forward(300);
		
		setxPos(400);
		setyPos(50);
		forward(300);
		
		//horizontal line
		setxPos(200);
		setyPos(150);
		turnLeft();
		forward(300);
		
		setxPos(200);
		setyPos(250);
		forward(300);
		
		//default position for turtle
		reset();
		penUp();
		penWidth(6);
		setxPos(600);
		setyPos(100);
		forward(1);
		setTurtleSpeed(0);
		
		
	}
	
	public void ticTacToeExit()
	{
		//indicating the game has ended.
		
		if(ticTacToeBoolean == true)
		{
			//only execute if the game is running
			ticTacToeBoolean = false;
			
			
			clear();
			reset();
			penDown();
		}
		
		//resets the speed to normal
		setTurtleSpeed(1);

	}
	
	
	public void processCommand(String command)
	{	
		//Prints the Command Entered.
		displayMessage("Command Entered: "+command);
		
		//Splitting Entered Command into An array of String objects.
		String[] commandEntered = command.split(" ");
		
		//Method parameter values.
		int[] enteredParameterValue = new int[3];
		
		//Collection Class ArrayList for accepted commands.
		ArrayList acceptedCommandCollection = new ArrayList();
		
		for(String i: commandCollection)
		{	
			//Adding Accepted Commands
			acceptedCommandCollection.add(i);
		}
		
		
		//Command validation is done first.
		//parameter validation is done second.
		if(acceptedCommandCollection.contains(commandEntered[0].toLowerCase()))
		{
			//Valid Command Case.
			
			//Case where too many parameters are entered.
			if(commandEntered.length>4)
			{	
				displayMessage("Too many parameters entered.");
				
				//Ends function Execution in case of error.
				return;
			}
			
			//Parameter Filtering & conversion.
			switch(commandEntered.length)
			{		
				case 2:
					//One parameter Case
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
					
				case 3:
					//two parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
								
				case 4:	
					//Three parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
						enteredParameterValue[2] = Integer.parseInt(commandEntered[3]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0 || enteredParameterValue[2]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;		
			}
			
			
			
			//Command filtering.
			switch(commandEntered[0].toLowerCase())
			{
				case "about":
					about();
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "reset":
					setxPos(400);
					setyPos(200);
					reset();
					penColour(255,0,0);
					break;
					
				case "penup":
					penUp();
					break;
					
				case "pendown":
					penDown();
					break;
					
				case "turnleft":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnLeft(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnLeft();
					}
					break;
					
				case "turnright":
					
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnRight(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnRight();
					}				
					break;
					
				case "forward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "backward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]-(enteredParameterValue[0]*2));
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "black":					
					//Sets pen color to black.
					setPenColour(Color.black);
					break;
					
				case "green":
					//Sets pen color to green.
					setPenColour(Color.green);
					break;
					
				case "red":				
					//Sets pen color to red.
					setPenColour(Color.red);			
					break;
					
				case "white":
					//Sets pen color to white.
					setPenColour(Color.white);					
					break;
					
				case "clear":
					if(saveCounter == true)
					{
						//Clears the display
						clear();
						
						//Clears the String buffer.
						strBufferObj.delete(0,strBufferObj.length());
						
						return;
					}
					else
					{
						//Non-Saved image case.
						
						int choice = JOptionPane.showConfirmDialog(null, "Current image/commands is not saved! Do you wish to Continue?");
						
						if(choice == JOptionPane.YES_OPTION)
						{
							//clears the display
							clear();
							
							//Clears the String buffer after each save.
							strBufferObj.delete(0,strBufferObj.length());
							
							//save counter True to symbolize saved status.
							saveCounter = true;
						}
						
						//returns statement to avoid being added to the string command buffer
						return;
					}
					
				case "save":
					try
					{
						//Save Image
						File savedImage = new File("savedImage.png");
						BufferedImage bufferedImageObjSave  = getBufferedImage();
						ImageIO.write(bufferedImageObjSave,"png", savedImage);
						
						//Saves Command
						File savedCommand = new File("savedCommand.txt");
						FileWriter fWriterObj = new FileWriter(savedCommand);
						BufferedWriter bWriterObj = new BufferedWriter(fWriterObj);
						bWriterObj.write(strBufferObj.toString());
						bWriterObj.close();
						
						//Clears the String buffer after each save.
						strBufferObj.delete(0,strBufferObj.length());
						
						//save counter True to symbolize saved status.
						saveCounter = true;
						
						//save dialog box
						JOptionPane.showMessageDialog(null, "Image & command Saved!");
						
						//returns statement to avoid being added to the string command buffer
						return;						
					}
					catch(Exception e)
					{
						displayMessage("Error Saving Image");
					}	
					break;
					
				case "load":
					
					if(saveCounter == true)
					{
						try
						{	
							//reset turtle position.
							reset();
							penDown();
							
							//Load Image
							File loadImage = new File("savedImage.png");
							BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
							setBufferedImage(bufferedImageObjLoad);
							
							
							//load Saved Commands.
							File savedCommand = new File("savedCommand.txt");
							FileReader fReaderObj = new FileReader(savedCommand);
							BufferedReader bReaderObj = new BufferedReader(fReaderObj);
													
							String line = bReaderObj.readLine(); //reads the first line of command file.
							while(line != null)
							{	
								processCommand(line);
								line = bReaderObj.readLine();
							}
							bReaderObj.close();
							
							//save counter True to symbolize saved status.
							saveCounter = true;
							
							//returns statement to avoid being added to the string command buffer
							return;
						}
						catch(Exception e)
						{
							displayMessage("Error Loading Image");
						}
					}
					else
					{	
						//Non-Saved image case.
						
						int choice = JOptionPane.showConfirmDialog(null, "Current image/commands is not saved! Do you wish to Continue?");
						
						if(choice == JOptionPane.YES_OPTION)
						{
							//save counter True to symbolize saved status.
							saveCounter = true;
							
							//load the old image
							processCommand("load");
						}
						
						//returns statement to avoid being added to the string command buffer
						return;
					}
					break;
					
					
				case "square":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						square(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "squarecentered":
					//Centered version of square method.
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						squareCentered(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "pencolour":
					if(commandEntered.length==4)
					{
						//Case where parameter is given - command + value.
						penColour(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;
					
					
				case "penwidth":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						penWidth(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;	
					
					
				case "triangle":
					if(commandEntered.length == 2)
					{
						//Case where one parameter is given - command + value.
						triangle(enteredParameterValue[0]);
					}
					else if(commandEntered.length == 4)
					{
						//Case where three parameter are given - command + parameter list.
						triangle(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "hexagram":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						hexagram(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;
					
				case "hexagon":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						hexagon(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;
					
				case "octagram":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						octagram(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "octagon":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						octagon(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "circle":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						circle(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "rgbmodeon":
					rgbModeOn();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
					
				case "rgbmodeoff":
					rgbModeOff();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "colorchooser":
					colorChooser();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "mousemodeon":
					mouseModeBool = true;
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "mousemodeoff":
					mouseModeBool = false;
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "help":
					Help();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "tictactoe":
					//Tic Tac Toe - Them game.
					ticTacToe();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "tictactoeexit":
					//Tic Tac Toe - Them game escape.
					ticTacToeExit();
					
					//Avoids being added to the string buffer/ saved commands
					return;
			}
			
		}
		else
		{	
			//invalid Command Case.
			displayMessage("Invalid Command.");
		}
		
		
		//Commands Entered into string buffer
		strBufferObj.append(command+"\n");
		
		try
		{
			//Updates Help UI 
			currentColor.setBackground(getPenColour());
		}
		catch(Exception e)
		{
			//Does noting if Help window is not opened
		}
		
	}
	
	
	
	//inner classes
	//WindowListener for Main Frame.
	private class WindowListenerClass extends WindowAdapter
	{

		public void windowClosing(WindowEvent event)
		{
			
			if(saveCounter == true)
			{
				event.getWindow().dispose();
			}
			else
			{
				int result = JOptionPane.showConfirmDialog(null, "The current image is not saved, do you wish to exit?");
				
				if(result == JOptionPane.YES_OPTION)
				{
					event.getWindow().dispose();
				}
			}
			
		}

	}
	
	//MouseMotionListener class for Main Frame
	private class MouseMotionListenerClass extends MouseMotionAdapter
	{
		
		public void mouseMoved(MouseEvent mEvent)
		{	
			if(mouseModeBool == true)
			{
				//sets turtle positions relative to the mouse position
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnLeft(2);
				  
			}
		}
		
		public void mouseDragged(MouseEvent mEvent)
		{
			if(mouseModeBool == true)
			{
			    //sets turtle positions relative to the mouse position
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnRight(2);
				
				//gets the graphical context on the invocation frame
			    Graphics frameGraphicContext = getGraphicsContext();
			    
			    //setColor
			    frameGraphicContext.setColor(getPenColour());  
			    
			    //initial width set to 0 for fillRoundRect()
			    int penSize = (int) getStroke()+1;
			    
				//Drawing on the Turtle graphical context frame
				frameGraphicContext.fillRoundRect(mEvent.getX()-40,mEvent.getY()-40,penSize,penSize,penSize,penSize);
				
				//save counter False to symbolize Unsaved status as changes have been made..
				saveCounter = false;

			}
		}
		
	}
	
	//MouseMotionListener class for Main Frame
	private class MouseListenerClass extends MouseAdapter
	{
		public void mousePressed(MouseEvent mEvent)
		{
			if(mouseModeBool == true)
			{
				//Same as mouseDragged method but only executed every time the mouse is clicked.
				
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnRight(2);
				
				//gets the graphical context on the invocation frame
			    Graphics frameGraphicContext = getGraphicsContext();
			    
			    //setColor
			    frameGraphicContext.setColor(getPenColour());  
			    
			    //initial width set to 0 for fillRoundRect()
			    int penSize = (int) getStroke()+1;
			    
				//Drawing on the Turtle graphical context frame
				frameGraphicContext.fillRoundRect(mEvent.getX()-40,mEvent.getY()-40,penSize,penSize,penSize,penSize);
				
				//save counter False to symbolize Unsaved status as changes have been made..
				saveCounter = false;
			}
		}
		
		public void mouseClicked(MouseEvent mEvent)
		{
			//if TicTacToe is Started
			if(ticTacToeBoolean == true)
			{
				//mouse co-od
				int x = mEvent.getX();
				int y = mEvent.getY();
				
				//default position for turtle
				reset();
				penUp();
				penWidth(6);
				setxPos(600);
				setyPos(100);
				forward(1);


				if(x<=300 && x>200)
				{
					if(y<=150 && y>50)
					{
						//box 1
						if(ticTacToeBox[0] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[0] = 'o';
									
									setxPos(200);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[0] = 'x';
									
									drawLine(getPenColour(),200, 150, 300, 50);
									drawLine(getPenColour(),300, 150, 200, 50);
										
									
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[0] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=250 && y>150)
					{
						//box 2
						if(ticTacToeBox[1] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[1] = 'o';
									
									setxPos(200);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[1] = 'x';
									
									drawLine(getPenColour(),200, 250, 300, 150);
									drawLine(getPenColour(),300, 250, 200, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[1] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 3
						if(ticTacToeBox[2] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[2] = 'o';
									
									setxPos(200);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[2] = 'x';
									
									drawLine(getPenColour(),200, 350, 300, 250);
									drawLine(getPenColour(),300, 350, 200, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[2] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				else if(x<=400 && x>300)
				{
					if(y<=150 && y>50)
					{
						//box 4
						if(ticTacToeBox[3] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[3] = 'o';
									
									setxPos(300);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[3] = 'x';
									
									drawLine(getPenColour(),300, 150, 400, 50);
									drawLine(getPenColour(),400, 150, 300, 50);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[3] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=250 && y>150)
					{
						//box 5
						if(ticTacToeBox[4] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[4] = 'o';
									
									setxPos(300);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[4] = 'x';
									
									drawLine(getPenColour(),300, 250, 400, 150);
									drawLine(getPenColour(),400, 250, 300, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[4] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 6
						if(ticTacToeBox[5] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[5] = 'o';
									
									setxPos(300);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[5] = 'x';
									
									drawLine(getPenColour(),300, 350, 400, 250);
									drawLine(getPenColour(),400, 350, 300, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[5] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				else if(x<=500 && x>400)
				{
					if(y<=150 && y>50)
					{
						//box 7
						if(ticTacToeBox[6] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[6] = 'o';
									
									setxPos(400);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[6] = 'x';
									
									drawLine(getPenColour(),400, 150, 500, 50);
									drawLine(getPenColour(),500, 150, 400, 50);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[6] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
						
					}
					else if(y<=250 && y>150)
					{
						//box 8
						if(ticTacToeBox[7] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[7] = 'o';
									
									setxPos(400);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[7] = 'x';
									
									drawLine(getPenColour(),400, 250, 500, 150);
									drawLine(getPenColour(),500, 250, 400, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[7] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 9
						if(ticTacToeBox[8] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[8] = 'o';
									
									setxPos(400);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[8] = 'x';
									
									drawLine(getPenColour(),400, 350, 500, 250);
									drawLine(getPenColour(),500, 350, 400, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[8] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				int i=0;
				while(i<9))
				{
					if(ticTacToeBoxOwner[i] == 'o' && ticTacToeBoxOwner[1] == 'o' && ticTacToeBoxOwner[2]=='o')
					{
						JOptionPane.showMessageDialog(null, "Player Circle Wins!");
					}
					else if(ticTacToeBoxOwner[0] == 'x' && ticTacToeBoxOwner[1] == 'x' && ticTacToeBoxOwner[2]=='x')
					{
						JOptionPane.showMessageDialog(null, "Player Cross Wins!");
					}
					i+4

				}


			}
			
			
		}
	}
	
	//Listener classes for the Help menu
	//Slider Listener class for help menu
	private class SliderListenerClass implements ChangeListener
	{
		public void stateChanged(ChangeEvent e) 
		{
			penColour(rValue.getValue(),gValue.getValue(),bValue.getValue());
			currentColor.setBackground(getPenColour());
		}
	}
	
	//Windows Listener class for help menu
	private class HelpWindowListenerClass extends WindowAdapter
	{

		public void windowClosing(WindowEvent event)
		{
			//close MainFrame window
			event.getWindow().dispose();
		}
		
	}
	
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-05-11 05:04:28.240
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-05-11 05:04:28.240
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-11 05:04:28.713
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package graphicsProgramFinalAssignmentOOP;

import uk.ac.leedsbeckett.oop.LBUGraphics;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.*;
import java.awt.Dimension;
import java.awt.Graphics;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JOptionPane;
import javax.swing.JColorChooser;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.util.ArrayList;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;

import java.util.Random;

import java.sql.DriverManager;
import java.sql.Connection;


public class GraphicsSystem extends LBUGraphics
{	
	//Array of accepted commands.
	private String[] commandCollection = {"about","penup","pendown","turnleft","turnright","forward","backward","black","green","red","white","reset","clear","save","load","square","squarecentered","pencolour","penwidth","triangle","hexagram","hexagon","octagram","octagon","circle","rgbmodeon","rgbmodeoff","colorchooser","mousemodeon","mousemodeoff","help","tictactoe","tictactoeexit"};
	
	//save counter
	private boolean saveCounter = true;
	
	//Command Entered Buffer
	private StringBuffer strBufferObj = new StringBuffer();
	
	//RGB mode counter
	private boolean rgbModeBool = false;
	
	//Help menu
	private JFrame helpWindow;
	private JSlider rValue,gValue,bValue;
	private JPanel currentColor;
	
	//mouse mode counter
	private boolean mouseModeBool = false;
	
	//Tic Tac Toe - game mode one or off
	private boolean ticTacToeBoolean = false;
	
	//ticTacToe box occupied counter
	private boolean[] ticTacToeBox = new boolean[9];
	
	//ticTacToe Box occupied player
	private char[] ticTacToeBoxOwner = new char[9];
	
	//Player Turn
	//cross = x
	//circle = o
	//initial turn for circle
	private char turn = 'o';

	public static void main(String[] args)
	{
		try
		{
			//register driver.
			Class.forName("com.mysql.cj.jdbc.Driver");
			//establishing connection to check for Database availability.
			Connection co = DriverManager.getConnection("jdbc:mysql://localhost:3306/turtlegraphicdata","root","");
			//closing test connection.
			co.close();
			
			//Database login 
			new DatabaseLogin();
			
		}
		catch(Exception e)
		{
			//database link failure - automatically opens turtleGraphic.
			new GraphicsSystem();
		}


	}
	
	
	public GraphicsSystem()
	{
        JFrame MainFrame = new JFrame(); 
        MainFrame.setLocation(20,20);
        MainFrame.setLayout(new FlowLayout());    
        MainFrame.add(this);                       
        MainFrame.setSize(850,450);               
        MainFrame.setVisible(true);   
        MainFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        MainFrame.addWindowListener(new WindowListenerClass());
        MainFrame.addMouseMotionListener(new MouseMotionListenerClass());
        MainFrame.addMouseListener(new MouseListenerClass());
        
        
        //about();
        reset();
        penDown();
	}

	
	public void about()
	{
		//overriding the about method.
	
		try
		{
			File loadImage = new File("name.png");
			BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
			setBufferedImage(bufferedImageObjLoad);
		}
		catch(Exception e)
		{
			displayMessage("Error loading Name");
		}
		
		//calling the parent class about method.
		super.about();

	}
	
	public void square(int length)
	{	
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}

	}
	
	public void squareCentered(int length)
	{	
		//initial position.
		int xPos = getxPos();
		int yPos = getyPos();
		
		
		reset();
		forward(length/2);
		turnRight();
		forward(length/2);
		turnLeft();
		
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}
		
		//going back to the original position after this command has been issued.
		setxPos(xPos);
		setyPos(yPos);
		
		//fixing teleport issues.
		penUp();
		forward(0);
		penDown();
	}
	
	
	public void penColour(int colourR, int colourG, int colourB)
	{
		try
		{
			Color c = new Color(colourR,colourG,colourB);
			setPenColour(c);
		}
		catch(Exception e)
		{
			//In case our of bound arguments are given.
			displayMessage("Color parameter outside of expected range: Red:255 Green:255 Blue:255");
		}
	}
	
	
	public void penWidth(int width)
	{
		setStroke(width);
	}
	
	public void triangle(int length)
	{
		//Draws a triangle with equal sides.
		turnLeft();
		penDown();
			
		int i;
		for(i=0;i<3;i++)
		{
			
			forward(length);
			
			if(i<2)
			{
				turnLeft(120);
			}
			
		}
	}
	
	
	public void triangle(int lengthOne, int lengthTwo, int lengthThree)
	{	
		//overloading triangle function.
		//Draws a triangle with specific sides.
	
		double a,b,largestLengthC,angleA,angleB,angleC;
		
		if(lengthOne>lengthTwo && lengthOne>lengthThree)
		{
			//case where lengthOne is the largest
			
			a = lengthTwo;
			b = lengthThree;
			
			largestLengthC = lengthOne;
			
		}
		else if(lengthTwo>lengthOne && lengthTwo>lengthThree)
		{
			//case where lengthTwo is the largest
			a = lengthOne;
			b = lengthThree;
			
			largestLengthC = lengthTwo;
		}
		else
		{	
			//case where lengthThree is the largest
			a = lengthOne;
			b = lengthTwo;
			
			largestLengthC = lengthThree;
		}
		
				
		//Using Cosine Law to find the largest angle vai the longest side.
		//c^2 = a^2 + b^2 -2*a*b*Cos(angle)
		//Cos(angle) =  -(c^2 - (a^2+b^2)) / 2ab
		//angle = cos*-1( -(c^2 - (a^2+b^2)) / 2ab) )
		double value;
		value = -(Math.pow(largestLengthC, 2) - ( Math.pow(a, 2) + Math.pow(b, 2))) /(2*a*b) ;
		angleC = Math.toDegrees(Math.acos(value)); // returns the angleC degree
		
		//using Sine Law to find the other angles.
		//sideA/sinA = sideB/sinB = sideC/sinC
		//A = (sin(c)*a/c)sin^-1
		//B = (sin(c)*b/c)sin^-1
		angleA = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (a/largestLengthC) ) );
		angleB = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (b/largestLengthC) ) );
		
		turnLeft();
		forward((int) largestLengthC);
		
		turnLeft(180 - (int) angleB);
		forward((int) a);
		
		turnLeft(180 - (int) angleC );
		forward((int) b);
		
		turnLeft(180 - (int) angleA);
		
	}
	
	public void hexagram(int length)
	{
		//Heron's formula 
		//s = (a+b+c)/2
		//a = sq(s(s-a)(s-b)(s-c))
		double s = (length+length+length)/2;
		double areaOfTriangle = Math.sqrt(s*((s-length)*(s-length)*(s-length)));
		
		//h=(2*A)/b
		//can also be said to be the median
		double heightOfTriangle = (2*areaOfTriangle)/length;
		
		//the distance between the vertex and the centroid of a triangle is 2/3 of the median of the triangle.
		int midPoint = (int) (heightOfTriangle/3)*2;	
		
		triangle(length);
		turnLeft(120);
		turnLeft(30);
		penUp();
		forward((int) midPoint);
		forward((int) midPoint);
		penDown();
		turnLeft(150);
		forward(length);
		turnLeft(120);
		forward(length);
		turnLeft(120);
		forward(length);
	}
	
	public void hexagon(int length)
	{
		turnLeft();
		penDown();
		
		for(int i=0;i<=5;i++)
		{
			forward(length);
			turnLeft(60);
		}

	}
	
	public void octagram(int length)
	{
		square(length);
		
		//fixing position for 2nd sqaure.
		penUp();
		turnLeft();
		forward(length/2);
		turnLeft();
		forward(length/2);
		turnLeft(45);
		forward(length/2);
		turnLeft();
		forward(length/2);
		
		square(length);
	}
	
	public void octagon(int length)
	{
		turnLeft();
		penDown();
		
		for(int i=0;i<=7;i++)
		{
			forward(length);
			turnLeft(45);
		}
	}
	
	public void rgbModeOn()
	{
		int[] rgbValue = {255,255,255};
		Random randObj = new Random();
		
		rgbModeBool = true;
		
		//Loops through the RGB value until RGB mode is turned off.
		while(rgbModeBool == true)
		{
			int i = randObj.nextInt(0,3);
			
			if(rgbValue[i] == 255)
			{
				while(rgbValue[i] > 0)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					
					try
					{
						//Updates Help UI
						currentColor.setBackground(getPenColour());
					}
					catch(Exception e)
					{
						//In case Help UI is not visible
					}

					--rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 	
					catch (InterruptedException e) 
					{
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
			else if(rgbValue[i]==0)
			{
				while(rgbValue[i] < 255)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					
					try
					{
						//Updates Help UI
						currentColor.setBackground(getPenColour());
					}
					catch(Exception e)
					{
						//In case Help UI is not visible
					}
					
					++rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 
					catch (InterruptedException e) 
					{
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
		}
		
	}
	
	public void rgbModeOff()
	{
		//Turns off RGB mode.
		rgbModeBool = false;
	}
	
	public void colorChooser()
	{
		Color newColor = JColorChooser.showDialog(null,"Choose Color", getPenColour());
		setPenColour(newColor);
		
		try
		{
			//Updates Help UI 
			currentColor.setBackground(getPenColour());
		}
		catch(Exception e)
		{
			//Does noting if Help window is not opened
		}
	}
	
	public void Help()
	{
		
		try
		{	
			//closes Help window if it already exists
			helpWindow.dispose();
		}
		catch(Exception e)
		{
			
		}
		
		//Help window MainFrame
		helpWindow = new JFrame("Help Window");
		helpWindow.setLocation(860,20);
		helpWindow.setVisible(true);
		helpWindow.setSize(600,600);
		helpWindow.setLayout(new FlowLayout());
		helpWindow.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		helpWindow.addWindowListener(new HelpWindowListenerClass());
		
		//command list panel
		JPanel commandList = new JPanel();
		commandList.setPreferredSize(new Dimension(200,600));
		commandList.setLayout(new BoxLayout(commandList,BoxLayout.Y_AXIS));
		
		//an Array of JLabel class references
		JLabel[] commandAvailable = new JLabel[commandCollection.length];
		
		for(int i=0;i<commandCollection.length;i++)
		{
			//referencing each reference variable with an JLabel object.
			//Specifies each JLabel object with Command names.
			commandAvailable[i] = new JLabel();
			commandAvailable[i].setText(i+1+". "+commandCollection[i]);
			commandAvailable[i].setPreferredSize(new Dimension(200,50));
			
			//adds each JLabel object into commandList panel, one by one.
			commandList.add(commandAvailable[i]);
		}
		
		
		//UI panel
		JPanel helpUI = new JPanel();
		helpUI.setPreferredSize(new Dimension(400,600));
		helpUI.setLayout(new BoxLayout(helpUI,BoxLayout.Y_AXIS));
		
		//RGB value slider
		rValue = new JSlider(JSlider.HORIZONTAL,0,255,255);
		rValue.setPaintTicks(true);
		rValue.setPaintLabels(true);
		rValue.setMajorTickSpacing(51);
		rValue.addChangeListener(new SliderListenerClass());
		
		gValue = new JSlider(JSlider.HORIZONTAL,0,255,0);
		gValue.setPaintTicks(true);
		gValue.setPaintLabels(true);
		gValue.setMajorTickSpacing(51);
		gValue.addChangeListener(new SliderListenerClass());
		
		bValue = new JSlider(JSlider.HORIZONTAL,0,255,0);
		bValue.setPaintTicks(true);
		bValue.setPaintLabels(true);
		bValue.setMajorTickSpacing(51);
		bValue.addChangeListener(new SliderListenerClass());
		
		//adding sliders into HelpUI panel
		helpUI.add(new JLabel("R"));
		helpUI.add(rValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		helpUI.add(new JLabel("G"));
		helpUI.add(gValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		helpUI.add(new JLabel("B"));
		helpUI.add(bValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		
		//CurrentColor checker
		currentColor = new JPanel();
		currentColor.setPreferredSize(new Dimension(50,50));
		currentColor.setBackground(getPenColour());
		currentColor.setBorder(BorderFactory.createLoweredBevelBorder());
		
		//adding current color panel to helpUI panel
		helpUI.add(currentColor);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		//Adding helpUI & commandList panels into the Main frame
		helpWindow.getContentPane().add(commandList);
		helpWindow.getContentPane().add(helpUI);
		helpWindow.pack();
	}
	
	public void ticTacToe()
	{
		clear();
		
		//indicating the game is called.
		ticTacToeBoolean = true;
		
		for(int i=0;i<ticTacToeBox.length;i++)
		{
			//setting all ticTacToeBox references false for initial game starting
			//indicates weather it is occupied or not.
			ticTacToeBox[i] = false;
		}
		
		for(int i=0;i<ticTacToeBoxOwner.length;i++)
		{
			//setting all ticTacToeBoxOwner references as null-'n' for initial game starting.
			ticTacToeBoxOwner[i] = 'n';
		}
		
		penDown();
		penWidth(6);
		setPenColour(Color.white);
		//each position area is of 100*100
		
		//vertical line
		setxPos(300);
		setyPos(50);
		forward(300);
		
		setxPos(400);
		setyPos(50);
		forward(300);
		
		//horizontal line
		setxPos(200);
		setyPos(150);
		turnLeft();
		forward(300);
		
		setxPos(200);
		setyPos(250);
		forward(300);
		
		//default position for turtle
		reset();
		penUp();
		penWidth(6);
		setxPos(600);
		setyPos(100);
		forward(1);
		setTurtleSpeed(0);
		
		
	}
	
	public void ticTacToeExit()
	{
		//indicating the game has ended.
		
		if(ticTacToeBoolean == true)
		{
			//only execute if the game is running
			ticTacToeBoolean = false;
			
			
			clear();
			reset();
			penDown();
		}
		
		//resets the speed to normal
		setTurtleSpeed(1);

	}
	
	
	public void processCommand(String command)
	{	
		//Prints the Command Entered.
		displayMessage("Command Entered: "+command);
		
		//Splitting Entered Command into An array of String objects.
		String[] commandEntered = command.split(" ");
		
		//Method parameter values.
		int[] enteredParameterValue = new int[3];
		
		//Collection Class ArrayList for accepted commands.
		ArrayList acceptedCommandCollection = new ArrayList();
		
		for(String i: commandCollection)
		{	
			//Adding Accepted Commands
			acceptedCommandCollection.add(i);
		}
		
		
		//Command validation is done first.
		//parameter validation is done second.
		if(acceptedCommandCollection.contains(commandEntered[0].toLowerCase()))
		{
			//Valid Command Case.
			
			//Case where too many parameters are entered.
			if(commandEntered.length>4)
			{	
				displayMessage("Too many parameters entered.");
				
				//Ends function Execution in case of error.
				return;
			}
			
			//Parameter Filtering & conversion.
			switch(commandEntered.length)
			{		
				case 2:
					//One parameter Case
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
					
				case 3:
					//two parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
								
				case 4:	
					//Three parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
						enteredParameterValue[2] = Integer.parseInt(commandEntered[3]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0 || enteredParameterValue[2]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;		
			}
			
			
			
			//Command filtering.
			switch(commandEntered[0].toLowerCase())
			{
				case "about":
					about();
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "reset":
					setxPos(400);
					setyPos(200);
					reset();
					penColour(255,0,0);
					break;
					
				case "penup":
					penUp();
					break;
					
				case "pendown":
					penDown();
					break;
					
				case "turnleft":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnLeft(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnLeft();
					}
					break;
					
				case "turnright":
					
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnRight(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnRight();
					}				
					break;
					
				case "forward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "backward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]-(enteredParameterValue[0]*2));
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "black":					
					//Sets pen color to black.
					setPenColour(Color.black);
					break;
					
				case "green":
					//Sets pen color to green.
					setPenColour(Color.green);
					break;
					
				case "red":				
					//Sets pen color to red.
					setPenColour(Color.red);			
					break;
					
				case "white":
					//Sets pen color to white.
					setPenColour(Color.white);					
					break;
					
				case "clear":
					if(saveCounter == true)
					{
						//Clears the display
						clear();
						
						//Clears the String buffer.
						strBufferObj.delete(0,strBufferObj.length());
						
						return;
					}
					else
					{
						//Non-Saved image case.
						
						int choice = JOptionPane.showConfirmDialog(null, "Current image/commands is not saved! Do you wish to Continue?");
						
						if(choice == JOptionPane.YES_OPTION)
						{
							//clears the display
							clear();
							
							//Clears the String buffer after each save.
							strBufferObj.delete(0,strBufferObj.length());
							
							//save counter True to symbolize saved status.
							saveCounter = true;
						}
						
						//returns statement to avoid being added to the string command buffer
						return;
					}
					
				case "save":
					try
					{
						//Save Image
						File savedImage = new File("savedImage.png");
						BufferedImage bufferedImageObjSave  = getBufferedImage();
						ImageIO.write(bufferedImageObjSave,"png", savedImage);
						
						//Saves Command
						File savedCommand = new File("savedCommand.txt");
						FileWriter fWriterObj = new FileWriter(savedCommand);
						BufferedWriter bWriterObj = new BufferedWriter(fWriterObj);
						bWriterObj.write(strBufferObj.toString());
						bWriterObj.close();
						
						//Clears the String buffer after each save.
						strBufferObj.delete(0,strBufferObj.length());
						
						//save counter True to symbolize saved status.
						saveCounter = true;
						
						//save dialog box
						JOptionPane.showMessageDialog(null, "Image & command Saved!");
						
						//returns statement to avoid being added to the string command buffer
						return;						
					}
					catch(Exception e)
					{
						displayMessage("Error Saving Image");
					}	
					break;
					
				case "load":
					
					if(saveCounter == true)
					{
						try
						{	
							//reset turtle position.
							reset();
							penDown();
							
							//Load Image
							File loadImage = new File("savedImage.png");
							BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
							setBufferedImage(bufferedImageObjLoad);
							
							
							//load Saved Commands.
							File savedCommand = new File("savedCommand.txt");
							FileReader fReaderObj = new FileReader(savedCommand);
							BufferedReader bReaderObj = new BufferedReader(fReaderObj);
													
							String line = bReaderObj.readLine(); //reads the first line of command file.
							while(line != null)
							{	
								processCommand(line);
								line = bReaderObj.readLine();
							}
							bReaderObj.close();
							
							//save counter True to symbolize saved status.
							saveCounter = true;
							
							//returns statement to avoid being added to the string command buffer
							return;
						}
						catch(Exception e)
						{
							displayMessage("Error Loading Image");
						}
					}
					else
					{	
						//Non-Saved image case.
						
						int choice = JOptionPane.showConfirmDialog(null, "Current image/commands is not saved! Do you wish to Continue?");
						
						if(choice == JOptionPane.YES_OPTION)
						{
							//save counter True to symbolize saved status.
							saveCounter = true;
							
							//load the old image
							processCommand("load");
						}
						
						//returns statement to avoid being added to the string command buffer
						return;
					}
					break;
					
					
				case "square":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						square(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "squarecentered":
					//Centered version of square method.
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						squareCentered(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "pencolour":
					if(commandEntered.length==4)
					{
						//Case where parameter is given - command + value.
						penColour(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;
					
					
				case "penwidth":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						penWidth(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;	
					
					
				case "triangle":
					if(commandEntered.length == 2)
					{
						//Case where one parameter is given - command + value.
						triangle(enteredParameterValue[0]);
					}
					else if(commandEntered.length == 4)
					{
						//Case where three parameter are given - command + parameter list.
						triangle(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "hexagram":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						hexagram(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;
					
				case "hexagon":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						hexagon(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;
					
				case "octagram":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						octagram(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "octagon":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						octagon(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "circle":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						circle(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "rgbmodeon":
					rgbModeOn();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
					
				case "rgbmodeoff":
					rgbModeOff();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "colorchooser":
					colorChooser();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "mousemodeon":
					mouseModeBool = true;
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "mousemodeoff":
					mouseModeBool = false;
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "help":
					Help();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "tictactoe":
					//Tic Tac Toe - Them game.
					ticTacToe();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "tictactoeexit":
					//Tic Tac Toe - Them game escape.
					ticTacToeExit();
					
					//Avoids being added to the string buffer/ saved commands
					return;
			}
			
		}
		else
		{	
			//invalid Command Case.
			displayMessage("Invalid Command.");
		}
		
		
		//Commands Entered into string buffer
		strBufferObj.append(command+"\n");
		
		try
		{
			//Updates Help UI 
			currentColor.setBackground(getPenColour());
		}
		catch(Exception e)
		{
			//Does noting if Help window is not opened
		}
		
	}
	
	
	
	//inner classes
	//WindowListener for Main Frame.
	private class WindowListenerClass extends WindowAdapter
	{

		public void windowClosing(WindowEvent event)
		{
			
			if(saveCounter == true)
			{
				event.getWindow().dispose();
			}
			else
			{
				int result = JOptionPane.showConfirmDialog(null, "The current image is not saved, do you wish to exit?");
				
				if(result == JOptionPane.YES_OPTION)
				{
					event.getWindow().dispose();
				}
			}
			
		}

	}
	
	//MouseMotionListener class for Main Frame
	private class MouseMotionListenerClass extends MouseMotionAdapter
	{
		
		public void mouseMoved(MouseEvent mEvent)
		{	
			if(mouseModeBool == true)
			{
				//sets turtle positions relative to the mouse position
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnLeft(2);
				  
			}
		}
		
		public void mouseDragged(MouseEvent mEvent)
		{
			if(mouseModeBool == true)
			{
			    //sets turtle positions relative to the mouse position
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnRight(2);
				
				//gets the graphical context on the invocation frame
			    Graphics frameGraphicContext = getGraphicsContext();
			    
			    //setColor
			    frameGraphicContext.setColor(getPenColour());  
			    
			    //initial width set to 0 for fillRoundRect()
			    int penSize = (int) getStroke()+1;
			    
				//Drawing on the Turtle graphical context frame
				frameGraphicContext.fillRoundRect(mEvent.getX()-40,mEvent.getY()-40,penSize,penSize,penSize,penSize);
				
				//save counter False to symbolize Unsaved status as changes have been made..
				saveCounter = false;

			}
		}
		
	}
	
	//MouseMotionListener class for Main Frame
	private class MouseListenerClass extends MouseAdapter
	{
		public void mousePressed(MouseEvent mEvent)
		{
			if(mouseModeBool == true)
			{
				//Same as mouseDragged method but only executed every time the mouse is clicked.
				
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnRight(2);
				
				//gets the graphical context on the invocation frame
			    Graphics frameGraphicContext = getGraphicsContext();
			    
			    //setColor
			    frameGraphicContext.setColor(getPenColour());  
			    
			    //initial width set to 0 for fillRoundRect()
			    int penSize = (int) getStroke()+1;
			    
				//Drawing on the Turtle graphical context frame
				frameGraphicContext.fillRoundRect(mEvent.getX()-40,mEvent.getY()-40,penSize,penSize,penSize,penSize);
				
				//save counter False to symbolize Unsaved status as changes have been made..
				saveCounter = false;
			}
		}
		
		public void mouseClicked(MouseEvent mEvent)
		{
			//if TicTacToe is Started
			if(ticTacToeBoolean == true)
			{
				//mouse co-od
				int x = mEvent.getX();
				int y = mEvent.getY();
				
				//default position for turtle
				reset();
				penUp();
				penWidth(6);
				setxPos(600);
				setyPos(100);
				forward(1);


				if(x<=300 && x>200)
				{
					if(y<=150 && y>50)
					{
						//box 1
						if(ticTacToeBox[0] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[0] = 'o';
									
									setxPos(200);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[0] = 'x';
									
									drawLine(getPenColour(),200, 150, 300, 50);
									drawLine(getPenColour(),300, 150, 200, 50);
										
									
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[0] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=250 && y>150)
					{
						//box 2
						if(ticTacToeBox[1] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[1] = 'o';
									
									setxPos(200);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[1] = 'x';
									
									drawLine(getPenColour(),200, 250, 300, 150);
									drawLine(getPenColour(),300, 250, 200, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[1] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 3
						if(ticTacToeBox[2] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[2] = 'o';
									
									setxPos(200);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[2] = 'x';
									
									drawLine(getPenColour(),200, 350, 300, 250);
									drawLine(getPenColour(),300, 350, 200, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[2] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				else if(x<=400 && x>300)
				{
					if(y<=150 && y>50)
					{
						//box 4
						if(ticTacToeBox[3] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[3] = 'o';
									
									setxPos(300);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[3] = 'x';
									
									drawLine(getPenColour(),300, 150, 400, 50);
									drawLine(getPenColour(),400, 150, 300, 50);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[3] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=250 && y>150)
					{
						//box 5
						if(ticTacToeBox[4] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[4] = 'o';
									
									setxPos(300);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[4] = 'x';
									
									drawLine(getPenColour(),300, 250, 400, 150);
									drawLine(getPenColour(),400, 250, 300, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[4] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 6
						if(ticTacToeBox[5] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[5] = 'o';
									
									setxPos(300);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[5] = 'x';
									
									drawLine(getPenColour(),300, 350, 400, 250);
									drawLine(getPenColour(),400, 350, 300, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[5] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				else if(x<=500 && x>400)
				{
					if(y<=150 && y>50)
					{
						//box 7
						if(ticTacToeBox[6] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[6] = 'o';
									
									setxPos(400);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[6] = 'x';
									
									drawLine(getPenColour(),400, 150, 500, 50);
									drawLine(getPenColour(),500, 150, 400, 50);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[6] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
						
					}
					else if(y<=250 && y>150)
					{
						//box 8
						if(ticTacToeBox[7] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[7] = 'o';
									
									setxPos(400);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[7] = 'x';
									
									drawLine(getPenColour(),400, 250, 500, 150);
									drawLine(getPenColour(),500, 250, 400, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[7] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 9
						if(ticTacToeBox[8] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[8] = 'o';
									
									setxPos(400);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[8] = 'x';
									
									drawLine(getPenColour(),400, 350, 500, 250);
									drawLine(getPenColour(),500, 350, 400, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[8] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				int i=0;
				while(i<9))
				{
					if(ticTacToeBoxOwner[i] == 'o' && ticTacToeBoxOwner[1] == 'o' && ticTacToeBoxOwner[2]=='o')
					{
						JOptionPane.showMessageDialog(null, "Player Circle Wins!");
					}
					else if(ticTacToeBoxOwner[0] == 'x' && ticTacToeBoxOwner[1] == 'x' && ticTacToeBoxOwner[2]=='x')
					{
						JOptionPane.showMessageDialog(null, "Player Cross Wins!");
					}
					i+4

				}


			}
			
			
		}
	}
	
	//Listener classes for the Help menu
	//Slider Listener class for help menu
	private class SliderListenerClass implements ChangeListener
	{
		public void stateChanged(ChangeEvent e) 
		{
			penColour(rValue.getValue(),gValue.getValue(),bValue.getValue());
			currentColor.setBackground(getPenColour());
		}
	}
	
	//Windows Listener class for help menu
	private class HelpWindowListenerClass extends WindowAdapter
	{

		public void windowClosing(WindowEvent event)
		{
			//close MainFrame window
			event.getWindow().dispose();
		}
		
	}
	
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-05-11 05:04:28.714
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-05-11 05:04:28.714
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-11 05:04:29.774
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package graphicsProgramFinalAssignmentOOP;

import uk.ac.leedsbeckett.oop.LBUGraphics;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.*;
import java.awt.Dimension;
import java.awt.Graphics;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JOptionPane;
import javax.swing.JColorChooser;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.util.ArrayList;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;

import java.util.Random;

import java.sql.DriverManager;
import java.sql.Connection;


public class GraphicsSystem extends LBUGraphics
{	
	//Array of accepted commands.
	private String[] commandCollection = {"about","penup","pendown","turnleft","turnright","forward","backward","black","green","red","white","reset","clear","save","load","square","squarecentered","pencolour","penwidth","triangle","hexagram","hexagon","octagram","octagon","circle","rgbmodeon","rgbmodeoff","colorchooser","mousemodeon","mousemodeoff","help","tictactoe","tictactoeexit"};
	
	//save counter
	private boolean saveCounter = true;
	
	//Command Entered Buffer
	private StringBuffer strBufferObj = new StringBuffer();
	
	//RGB mode counter
	private boolean rgbModeBool = false;
	
	//Help menu
	private JFrame helpWindow;
	private JSlider rValue,gValue,bValue;
	private JPanel currentColor;
	
	//mouse mode counter
	private boolean mouseModeBool = false;
	
	//Tic Tac Toe - game mode one or off
	private boolean ticTacToeBoolean = false;
	
	//ticTacToe box occupied counter
	private boolean[] ticTacToeBox = new boolean[9];
	
	//ticTacToe Box occupied player
	private char[] ticTacToeBoxOwner = new char[9];
	
	//Player Turn
	//cross = x
	//circle = o
	//initial turn for circle
	private char turn = 'o';

	public static void main(String[] args)
	{
		try
		{
			//register driver.
			Class.forName("com.mysql.cj.jdbc.Driver");
			//establishing connection to check for Database availability.
			Connection co = DriverManager.getConnection("jdbc:mysql://localhost:3306/turtlegraphicdata","root","");
			//closing test connection.
			co.close();
			
			//Database login 
			new DatabaseLogin();
			
		}
		catch(Exception e)
		{
			//database link failure - automatically opens turtleGraphic.
			new GraphicsSystem();
		}


	}
	
	
	public GraphicsSystem()
	{
        JFrame MainFrame = new JFrame(); 
        MainFrame.setLocation(20,20);
        MainFrame.setLayout(new FlowLayout());    
        MainFrame.add(this);                       
        MainFrame.setSize(850,450);               
        MainFrame.setVisible(true);   
        MainFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        MainFrame.addWindowListener(new WindowListenerClass());
        MainFrame.addMouseMotionListener(new MouseMotionListenerClass());
        MainFrame.addMouseListener(new MouseListenerClass());
        
        
        //about();
        reset();
        penDown();
	}

	
	public void about()
	{
		//overriding the about method.
	
		try
		{
			File loadImage = new File("name.png");
			BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
			setBufferedImage(bufferedImageObjLoad);
		}
		catch(Exception e)
		{
			displayMessage("Error loading Name");
		}
		
		//calling the parent class about method.
		super.about();

	}
	
	public void square(int length)
	{	
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}

	}
	
	public void squareCentered(int length)
	{	
		//initial position.
		int xPos = getxPos();
		int yPos = getyPos();
		
		
		reset();
		forward(length/2);
		turnRight();
		forward(length/2);
		turnLeft();
		
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}
		
		//going back to the original position after this command has been issued.
		setxPos(xPos);
		setyPos(yPos);
		
		//fixing teleport issues.
		penUp();
		forward(0);
		penDown();
	}
	
	
	public void penColour(int colourR, int colourG, int colourB)
	{
		try
		{
			Color c = new Color(colourR,colourG,colourB);
			setPenColour(c);
		}
		catch(Exception e)
		{
			//In case our of bound arguments are given.
			displayMessage("Color parameter outside of expected range: Red:255 Green:255 Blue:255");
		}
	}
	
	
	public void penWidth(int width)
	{
		setStroke(width);
	}
	
	public void triangle(int length)
	{
		//Draws a triangle with equal sides.
		turnLeft();
		penDown();
			
		int i;
		for(i=0;i<3;i++)
		{
			
			forward(length);
			
			if(i<2)
			{
				turnLeft(120);
			}
			
		}
	}
	
	
	public void triangle(int lengthOne, int lengthTwo, int lengthThree)
	{	
		//overloading triangle function.
		//Draws a triangle with specific sides.
	
		double a,b,largestLengthC,angleA,angleB,angleC;
		
		if(lengthOne>lengthTwo && lengthOne>lengthThree)
		{
			//case where lengthOne is the largest
			
			a = lengthTwo;
			b = lengthThree;
			
			largestLengthC = lengthOne;
			
		}
		else if(lengthTwo>lengthOne && lengthTwo>lengthThree)
		{
			//case where lengthTwo is the largest
			a = lengthOne;
			b = lengthThree;
			
			largestLengthC = lengthTwo;
		}
		else
		{	
			//case where lengthThree is the largest
			a = lengthOne;
			b = lengthTwo;
			
			largestLengthC = lengthThree;
		}
		
				
		//Using Cosine Law to find the largest angle vai the longest side.
		//c^2 = a^2 + b^2 -2*a*b*Cos(angle)
		//Cos(angle) =  -(c^2 - (a^2+b^2)) / 2ab
		//angle = cos*-1( -(c^2 - (a^2+b^2)) / 2ab) )
		double value;
		value = -(Math.pow(largestLengthC, 2) - ( Math.pow(a, 2) + Math.pow(b, 2))) /(2*a*b) ;
		angleC = Math.toDegrees(Math.acos(value)); // returns the angleC degree
		
		//using Sine Law to find the other angles.
		//sideA/sinA = sideB/sinB = sideC/sinC
		//A = (sin(c)*a/c)sin^-1
		//B = (sin(c)*b/c)sin^-1
		angleA = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (a/largestLengthC) ) );
		angleB = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (b/largestLengthC) ) );
		
		turnLeft();
		forward((int) largestLengthC);
		
		turnLeft(180 - (int) angleB);
		forward((int) a);
		
		turnLeft(180 - (int) angleC );
		forward((int) b);
		
		turnLeft(180 - (int) angleA);
		
	}
	
	public void hexagram(int length)
	{
		//Heron's formula 
		//s = (a+b+c)/2
		//a = sq(s(s-a)(s-b)(s-c))
		double s = (length+length+length)/2;
		double areaOfTriangle = Math.sqrt(s*((s-length)*(s-length)*(s-length)));
		
		//h=(2*A)/b
		//can also be said to be the median
		double heightOfTriangle = (2*areaOfTriangle)/length;
		
		//the distance between the vertex and the centroid of a triangle is 2/3 of the median of the triangle.
		int midPoint = (int) (heightOfTriangle/3)*2;	
		
		triangle(length);
		turnLeft(120);
		turnLeft(30);
		penUp();
		forward((int) midPoint);
		forward((int) midPoint);
		penDown();
		turnLeft(150);
		forward(length);
		turnLeft(120);
		forward(length);
		turnLeft(120);
		forward(length);
	}
	
	public void hexagon(int length)
	{
		turnLeft();
		penDown();
		
		for(int i=0;i<=5;i++)
		{
			forward(length);
			turnLeft(60);
		}

	}
	
	public void octagram(int length)
	{
		square(length);
		
		//fixing position for 2nd sqaure.
		penUp();
		turnLeft();
		forward(length/2);
		turnLeft();
		forward(length/2);
		turnLeft(45);
		forward(length/2);
		turnLeft();
		forward(length/2);
		
		square(length);
	}
	
	public void octagon(int length)
	{
		turnLeft();
		penDown();
		
		for(int i=0;i<=7;i++)
		{
			forward(length);
			turnLeft(45);
		}
	}
	
	public void rgbModeOn()
	{
		int[] rgbValue = {255,255,255};
		Random randObj = new Random();
		
		rgbModeBool = true;
		
		//Loops through the RGB value until RGB mode is turned off.
		while(rgbModeBool == true)
		{
			int i = randObj.nextInt(0,3);
			
			if(rgbValue[i] == 255)
			{
				while(rgbValue[i] > 0)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					
					try
					{
						//Updates Help UI
						currentColor.setBackground(getPenColour());
					}
					catch(Exception e)
					{
						//In case Help UI is not visible
					}

					--rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 	
					catch (InterruptedException e) 
					{
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
			else if(rgbValue[i]==0)
			{
				while(rgbValue[i] < 255)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					
					try
					{
						//Updates Help UI
						currentColor.setBackground(getPenColour());
					}
					catch(Exception e)
					{
						//In case Help UI is not visible
					}
					
					++rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 
					catch (InterruptedException e) 
					{
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
		}
		
	}
	
	public void rgbModeOff()
	{
		//Turns off RGB mode.
		rgbModeBool = false;
	}
	
	public void colorChooser()
	{
		Color newColor = JColorChooser.showDialog(null,"Choose Color", getPenColour());
		setPenColour(newColor);
		
		try
		{
			//Updates Help UI 
			currentColor.setBackground(getPenColour());
		}
		catch(Exception e)
		{
			//Does noting if Help window is not opened
		}
	}
	
	public void Help()
	{
		
		try
		{	
			//closes Help window if it already exists
			helpWindow.dispose();
		}
		catch(Exception e)
		{
			
		}
		
		//Help window MainFrame
		helpWindow = new JFrame("Help Window");
		helpWindow.setLocation(860,20);
		helpWindow.setVisible(true);
		helpWindow.setSize(600,600);
		helpWindow.setLayout(new FlowLayout());
		helpWindow.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		helpWindow.addWindowListener(new HelpWindowListenerClass());
		
		//command list panel
		JPanel commandList = new JPanel();
		commandList.setPreferredSize(new Dimension(200,600));
		commandList.setLayout(new BoxLayout(commandList,BoxLayout.Y_AXIS));
		
		//an Array of JLabel class references
		JLabel[] commandAvailable = new JLabel[commandCollection.length];
		
		for(int i=0;i<commandCollection.length;i++)
		{
			//referencing each reference variable with an JLabel object.
			//Specifies each JLabel object with Command names.
			commandAvailable[i] = new JLabel();
			commandAvailable[i].setText(i+1+". "+commandCollection[i]);
			commandAvailable[i].setPreferredSize(new Dimension(200,50));
			
			//adds each JLabel object into commandList panel, one by one.
			commandList.add(commandAvailable[i]);
		}
		
		
		//UI panel
		JPanel helpUI = new JPanel();
		helpUI.setPreferredSize(new Dimension(400,600));
		helpUI.setLayout(new BoxLayout(helpUI,BoxLayout.Y_AXIS));
		
		//RGB value slider
		rValue = new JSlider(JSlider.HORIZONTAL,0,255,255);
		rValue.setPaintTicks(true);
		rValue.setPaintLabels(true);
		rValue.setMajorTickSpacing(51);
		rValue.addChangeListener(new SliderListenerClass());
		
		gValue = new JSlider(JSlider.HORIZONTAL,0,255,0);
		gValue.setPaintTicks(true);
		gValue.setPaintLabels(true);
		gValue.setMajorTickSpacing(51);
		gValue.addChangeListener(new SliderListenerClass());
		
		bValue = new JSlider(JSlider.HORIZONTAL,0,255,0);
		bValue.setPaintTicks(true);
		bValue.setPaintLabels(true);
		bValue.setMajorTickSpacing(51);
		bValue.addChangeListener(new SliderListenerClass());
		
		//adding sliders into HelpUI panel
		helpUI.add(new JLabel("R"));
		helpUI.add(rValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		helpUI.add(new JLabel("G"));
		helpUI.add(gValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		helpUI.add(new JLabel("B"));
		helpUI.add(bValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		
		//CurrentColor checker
		currentColor = new JPanel();
		currentColor.setPreferredSize(new Dimension(50,50));
		currentColor.setBackground(getPenColour());
		currentColor.setBorder(BorderFactory.createLoweredBevelBorder());
		
		//adding current color panel to helpUI panel
		helpUI.add(currentColor);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		//Adding helpUI & commandList panels into the Main frame
		helpWindow.getContentPane().add(commandList);
		helpWindow.getContentPane().add(helpUI);
		helpWindow.pack();
	}
	
	public void ticTacToe()
	{
		clear();
		
		//indicating the game is called.
		ticTacToeBoolean = true;
		
		for(int i=0;i<ticTacToeBox.length;i++)
		{
			//setting all ticTacToeBox references false for initial game starting
			//indicates weather it is occupied or not.
			ticTacToeBox[i] = false;
		}
		
		for(int i=0;i<ticTacToeBoxOwner.length;i++)
		{
			//setting all ticTacToeBoxOwner references as null-'n' for initial game starting.
			ticTacToeBoxOwner[i] = 'n';
		}
		
		penDown();
		penWidth(6);
		setPenColour(Color.white);
		//each position area is of 100*100
		
		//vertical line
		setxPos(300);
		setyPos(50);
		forward(300);
		
		setxPos(400);
		setyPos(50);
		forward(300);
		
		//horizontal line
		setxPos(200);
		setyPos(150);
		turnLeft();
		forward(300);
		
		setxPos(200);
		setyPos(250);
		forward(300);
		
		//default position for turtle
		reset();
		penUp();
		penWidth(6);
		setxPos(600);
		setyPos(100);
		forward(1);
		setTurtleSpeed(0);
		
		
	}
	
	public void ticTacToeExit()
	{
		//indicating the game has ended.
		
		if(ticTacToeBoolean == true)
		{
			//only execute if the game is running
			ticTacToeBoolean = false;
			
			
			clear();
			reset();
			penDown();
		}
		
		//resets the speed to normal
		setTurtleSpeed(1);

	}
	
	
	public void processCommand(String command)
	{	
		//Prints the Command Entered.
		displayMessage("Command Entered: "+command);
		
		//Splitting Entered Command into An array of String objects.
		String[] commandEntered = command.split(" ");
		
		//Method parameter values.
		int[] enteredParameterValue = new int[3];
		
		//Collection Class ArrayList for accepted commands.
		ArrayList acceptedCommandCollection = new ArrayList();
		
		for(String i: commandCollection)
		{	
			//Adding Accepted Commands
			acceptedCommandCollection.add(i);
		}
		
		
		//Command validation is done first.
		//parameter validation is done second.
		if(acceptedCommandCollection.contains(commandEntered[0].toLowerCase()))
		{
			//Valid Command Case.
			
			//Case where too many parameters are entered.
			if(commandEntered.length>4)
			{	
				displayMessage("Too many parameters entered.");
				
				//Ends function Execution in case of error.
				return;
			}
			
			//Parameter Filtering & conversion.
			switch(commandEntered.length)
			{		
				case 2:
					//One parameter Case
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
					
				case 3:
					//two parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
								
				case 4:	
					//Three parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
						enteredParameterValue[2] = Integer.parseInt(commandEntered[3]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0 || enteredParameterValue[2]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;		
			}
			
			
			
			//Command filtering.
			switch(commandEntered[0].toLowerCase())
			{
				case "about":
					about();
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "reset":
					setxPos(400);
					setyPos(200);
					reset();
					penColour(255,0,0);
					break;
					
				case "penup":
					penUp();
					break;
					
				case "pendown":
					penDown();
					break;
					
				case "turnleft":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnLeft(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnLeft();
					}
					break;
					
				case "turnright":
					
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnRight(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnRight();
					}				
					break;
					
				case "forward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "backward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]-(enteredParameterValue[0]*2));
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "black":					
					//Sets pen color to black.
					setPenColour(Color.black);
					break;
					
				case "green":
					//Sets pen color to green.
					setPenColour(Color.green);
					break;
					
				case "red":				
					//Sets pen color to red.
					setPenColour(Color.red);			
					break;
					
				case "white":
					//Sets pen color to white.
					setPenColour(Color.white);					
					break;
					
				case "clear":
					if(saveCounter == true)
					{
						//Clears the display
						clear();
						
						//Clears the String buffer.
						strBufferObj.delete(0,strBufferObj.length());
						
						return;
					}
					else
					{
						//Non-Saved image case.
						
						int choice = JOptionPane.showConfirmDialog(null, "Current image/commands is not saved! Do you wish to Continue?");
						
						if(choice == JOptionPane.YES_OPTION)
						{
							//clears the display
							clear();
							
							//Clears the String buffer after each save.
							strBufferObj.delete(0,strBufferObj.length());
							
							//save counter True to symbolize saved status.
							saveCounter = true;
						}
						
						//returns statement to avoid being added to the string command buffer
						return;
					}
					
				case "save":
					try
					{
						//Save Image
						File savedImage = new File("savedImage.png");
						BufferedImage bufferedImageObjSave  = getBufferedImage();
						ImageIO.write(bufferedImageObjSave,"png", savedImage);
						
						//Saves Command
						File savedCommand = new File("savedCommand.txt");
						FileWriter fWriterObj = new FileWriter(savedCommand);
						BufferedWriter bWriterObj = new BufferedWriter(fWriterObj);
						bWriterObj.write(strBufferObj.toString());
						bWriterObj.close();
						
						//Clears the String buffer after each save.
						strBufferObj.delete(0,strBufferObj.length());
						
						//save counter True to symbolize saved status.
						saveCounter = true;
						
						//save dialog box
						JOptionPane.showMessageDialog(null, "Image & command Saved!");
						
						//returns statement to avoid being added to the string command buffer
						return;						
					}
					catch(Exception e)
					{
						displayMessage("Error Saving Image");
					}	
					break;
					
				case "load":
					
					if(saveCounter == true)
					{
						try
						{	
							//reset turtle position.
							reset();
							penDown();
							
							//Load Image
							File loadImage = new File("savedImage.png");
							BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
							setBufferedImage(bufferedImageObjLoad);
							
							
							//load Saved Commands.
							File savedCommand = new File("savedCommand.txt");
							FileReader fReaderObj = new FileReader(savedCommand);
							BufferedReader bReaderObj = new BufferedReader(fReaderObj);
													
							String line = bReaderObj.readLine(); //reads the first line of command file.
							while(line != null)
							{	
								processCommand(line);
								line = bReaderObj.readLine();
							}
							bReaderObj.close();
							
							//save counter True to symbolize saved status.
							saveCounter = true;
							
							//returns statement to avoid being added to the string command buffer
							return;
						}
						catch(Exception e)
						{
							displayMessage("Error Loading Image");
						}
					}
					else
					{	
						//Non-Saved image case.
						
						int choice = JOptionPane.showConfirmDialog(null, "Current image/commands is not saved! Do you wish to Continue?");
						
						if(choice == JOptionPane.YES_OPTION)
						{
							//save counter True to symbolize saved status.
							saveCounter = true;
							
							//load the old image
							processCommand("load");
						}
						
						//returns statement to avoid being added to the string command buffer
						return;
					}
					break;
					
					
				case "square":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						square(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "squarecentered":
					//Centered version of square method.
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						squareCentered(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "pencolour":
					if(commandEntered.length==4)
					{
						//Case where parameter is given - command + value.
						penColour(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;
					
					
				case "penwidth":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						penWidth(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;	
					
					
				case "triangle":
					if(commandEntered.length == 2)
					{
						//Case where one parameter is given - command + value.
						triangle(enteredParameterValue[0]);
					}
					else if(commandEntered.length == 4)
					{
						//Case where three parameter are given - command + parameter list.
						triangle(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "hexagram":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						hexagram(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;
					
				case "hexagon":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						hexagon(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;
					
				case "octagram":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						octagram(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "octagon":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						octagon(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "circle":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						circle(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "rgbmodeon":
					rgbModeOn();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
					
				case "rgbmodeoff":
					rgbModeOff();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "colorchooser":
					colorChooser();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "mousemodeon":
					mouseModeBool = true;
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "mousemodeoff":
					mouseModeBool = false;
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "help":
					Help();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "tictactoe":
					//Tic Tac Toe - Them game.
					ticTacToe();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "tictactoeexit":
					//Tic Tac Toe - Them game escape.
					ticTacToeExit();
					
					//Avoids being added to the string buffer/ saved commands
					return;
			}
			
		}
		else
		{	
			//invalid Command Case.
			displayMessage("Invalid Command.");
		}
		
		
		//Commands Entered into string buffer
		strBufferObj.append(command+"\n");
		
		try
		{
			//Updates Help UI 
			currentColor.setBackground(getPenColour());
		}
		catch(Exception e)
		{
			//Does noting if Help window is not opened
		}
		
	}
	
	
	
	//inner classes
	//WindowListener for Main Frame.
	private class WindowListenerClass extends WindowAdapter
	{

		public void windowClosing(WindowEvent event)
		{
			
			if(saveCounter == true)
			{
				event.getWindow().dispose();
			}
			else
			{
				int result = JOptionPane.showConfirmDialog(null, "The current image is not saved, do you wish to exit?");
				
				if(result == JOptionPane.YES_OPTION)
				{
					event.getWindow().dispose();
				}
			}
			
		}

	}
	
	//MouseMotionListener class for Main Frame
	private class MouseMotionListenerClass extends MouseMotionAdapter
	{
		
		public void mouseMoved(MouseEvent mEvent)
		{	
			if(mouseModeBool == true)
			{
				//sets turtle positions relative to the mouse position
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnLeft(2);
				  
			}
		}
		
		public void mouseDragged(MouseEvent mEvent)
		{
			if(mouseModeBool == true)
			{
			    //sets turtle positions relative to the mouse position
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnRight(2);
				
				//gets the graphical context on the invocation frame
			    Graphics frameGraphicContext = getGraphicsContext();
			    
			    //setColor
			    frameGraphicContext.setColor(getPenColour());  
			    
			    //initial width set to 0 for fillRoundRect()
			    int penSize = (int) getStroke()+1;
			    
				//Drawing on the Turtle graphical context frame
				frameGraphicContext.fillRoundRect(mEvent.getX()-40,mEvent.getY()-40,penSize,penSize,penSize,penSize);
				
				//save counter False to symbolize Unsaved status as changes have been made..
				saveCounter = false;

			}
		}
		
	}
	
	//MouseMotionListener class for Main Frame
	private class MouseListenerClass extends MouseAdapter
	{
		public void mousePressed(MouseEvent mEvent)
		{
			if(mouseModeBool == true)
			{
				//Same as mouseDragged method but only executed every time the mouse is clicked.
				
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnRight(2);
				
				//gets the graphical context on the invocation frame
			    Graphics frameGraphicContext = getGraphicsContext();
			    
			    //setColor
			    frameGraphicContext.setColor(getPenColour());  
			    
			    //initial width set to 0 for fillRoundRect()
			    int penSize = (int) getStroke()+1;
			    
				//Drawing on the Turtle graphical context frame
				frameGraphicContext.fillRoundRect(mEvent.getX()-40,mEvent.getY()-40,penSize,penSize,penSize,penSize);
				
				//save counter False to symbolize Unsaved status as changes have been made..
				saveCounter = false;
			}
		}
		
		public void mouseClicked(MouseEvent mEvent)
		{
			//if TicTacToe is Started
			if(ticTacToeBoolean == true)
			{
				//mouse co-od
				int x = mEvent.getX();
				int y = mEvent.getY();
				
				//default position for turtle
				reset();
				penUp();
				penWidth(6);
				setxPos(600);
				setyPos(100);
				forward(1);


				if(x<=300 && x>200)
				{
					if(y<=150 && y>50)
					{
						//box 1
						if(ticTacToeBox[0] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[0] = 'o';
									
									setxPos(200);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[0] = 'x';
									
									drawLine(getPenColour(),200, 150, 300, 50);
									drawLine(getPenColour(),300, 150, 200, 50);
										
									
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[0] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=250 && y>150)
					{
						//box 2
						if(ticTacToeBox[1] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[1] = 'o';
									
									setxPos(200);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[1] = 'x';
									
									drawLine(getPenColour(),200, 250, 300, 150);
									drawLine(getPenColour(),300, 250, 200, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[1] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 3
						if(ticTacToeBox[2] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[2] = 'o';
									
									setxPos(200);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[2] = 'x';
									
									drawLine(getPenColour(),200, 350, 300, 250);
									drawLine(getPenColour(),300, 350, 200, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[2] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				else if(x<=400 && x>300)
				{
					if(y<=150 && y>50)
					{
						//box 4
						if(ticTacToeBox[3] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[3] = 'o';
									
									setxPos(300);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[3] = 'x';
									
									drawLine(getPenColour(),300, 150, 400, 50);
									drawLine(getPenColour(),400, 150, 300, 50);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[3] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=250 && y>150)
					{
						//box 5
						if(ticTacToeBox[4] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[4] = 'o';
									
									setxPos(300);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[4] = 'x';
									
									drawLine(getPenColour(),300, 250, 400, 150);
									drawLine(getPenColour(),400, 250, 300, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[4] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 6
						if(ticTacToeBox[5] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[5] = 'o';
									
									setxPos(300);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[5] = 'x';
									
									drawLine(getPenColour(),300, 350, 400, 250);
									drawLine(getPenColour(),400, 350, 300, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[5] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				else if(x<=500 && x>400)
				{
					if(y<=150 && y>50)
					{
						//box 7
						if(ticTacToeBox[6] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[6] = 'o';
									
									setxPos(400);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[6] = 'x';
									
									drawLine(getPenColour(),400, 150, 500, 50);
									drawLine(getPenColour(),500, 150, 400, 50);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[6] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
						
					}
					else if(y<=250 && y>150)
					{
						//box 8
						if(ticTacToeBox[7] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[7] = 'o';
									
									setxPos(400);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[7] = 'x';
									
									drawLine(getPenColour(),400, 250, 500, 150);
									drawLine(getPenColour(),500, 250, 400, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[7] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 9
						if(ticTacToeBox[8] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[8] = 'o';
									
									setxPos(400);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[8] = 'x';
									
									drawLine(getPenColour(),400, 350, 500, 250);
									drawLine(getPenColour(),500, 350, 400, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[8] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				int i=0;
				while(i<9)
				{
					if(ticTacToeBoxOwner[i] == 'o' && ticTacToeBoxOwner[1] == 'o' && ticTacToeBoxOwner[2]=='o')
					{
						JOptionPane.showMessageDialog(null, "Player Circle Wins!");
					}
					else if(ticTacToeBoxOwner[0] == 'x' && ticTacToeBoxOwner[1] == 'x' && ticTacToeBoxOwner[2]=='x')
					{
						JOptionPane.showMessageDialog(null, "Player Cross Wins!");
					}
					i+4

				}


			}
			
			
		}
	}
	
	//Listener classes for the Help menu
	//Slider Listener class for help menu
	private class SliderListenerClass implements ChangeListener
	{
		public void stateChanged(ChangeEvent e) 
		{
			penColour(rValue.getValue(),gValue.getValue(),bValue.getValue());
			currentColor.setBackground(getPenColour());
		}
	}
	
	//Windows Listener class for help menu
	private class HelpWindowListenerClass extends WindowAdapter
	{

		public void windowClosing(WindowEvent event)
		{
			//close MainFrame window
			event.getWindow().dispose();
		}
		
	}
	
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-05-11 05:04:29.774
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-05-11 05:04:29.775
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-11 05:04:29.851
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package graphicsProgramFinalAssignmentOOP;

import uk.ac.leedsbeckett.oop.LBUGraphics;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.*;
import java.awt.Dimension;
import java.awt.Graphics;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JOptionPane;
import javax.swing.JColorChooser;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.util.ArrayList;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;

import java.util.Random;

import java.sql.DriverManager;
import java.sql.Connection;


public class GraphicsSystem extends LBUGraphics
{	
	//Array of accepted commands.
	private String[] commandCollection = {"about","penup","pendown","turnleft","turnright","forward","backward","black","green","red","white","reset","clear","save","load","square","squarecentered","pencolour","penwidth","triangle","hexagram","hexagon","octagram","octagon","circle","rgbmodeon","rgbmodeoff","colorchooser","mousemodeon","mousemodeoff","help","tictactoe","tictactoeexit"};
	
	//save counter
	private boolean saveCounter = true;
	
	//Command Entered Buffer
	private StringBuffer strBufferObj = new StringBuffer();
	
	//RGB mode counter
	private boolean rgbModeBool = false;
	
	//Help menu
	private JFrame helpWindow;
	private JSlider rValue,gValue,bValue;
	private JPanel currentColor;
	
	//mouse mode counter
	private boolean mouseModeBool = false;
	
	//Tic Tac Toe - game mode one or off
	private boolean ticTacToeBoolean = false;
	
	//ticTacToe box occupied counter
	private boolean[] ticTacToeBox = new boolean[9];
	
	//ticTacToe Box occupied player
	private char[] ticTacToeBoxOwner = new char[9];
	
	//Player Turn
	//cross = x
	//circle = o
	//initial turn for circle
	private char turn = 'o';

	public static void main(String[] args)
	{
		try
		{
			//register driver.
			Class.forName("com.mysql.cj.jdbc.Driver");
			//establishing connection to check for Database availability.
			Connection co = DriverManager.getConnection("jdbc:mysql://localhost:3306/turtlegraphicdata","root","");
			//closing test connection.
			co.close();
			
			//Database login 
			new DatabaseLogin();
			
		}
		catch(Exception e)
		{
			//database link failure - automatically opens turtleGraphic.
			new GraphicsSystem();
		}


	}
	
	
	public GraphicsSystem()
	{
        JFrame MainFrame = new JFrame(); 
        MainFrame.setLocation(20,20);
        MainFrame.setLayout(new FlowLayout());    
        MainFrame.add(this);                       
        MainFrame.setSize(850,450);               
        MainFrame.setVisible(true);   
        MainFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        MainFrame.addWindowListener(new WindowListenerClass());
        MainFrame.addMouseMotionListener(new MouseMotionListenerClass());
        MainFrame.addMouseListener(new MouseListenerClass());
        
        
        //about();
        reset();
        penDown();
	}

	
	public void about()
	{
		//overriding the about method.
	
		try
		{
			File loadImage = new File("name.png");
			BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
			setBufferedImage(bufferedImageObjLoad);
		}
		catch(Exception e)
		{
			displayMessage("Error loading Name");
		}
		
		//calling the parent class about method.
		super.about();

	}
	
	public void square(int length)
	{	
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}

	}
	
	public void squareCentered(int length)
	{	
		//initial position.
		int xPos = getxPos();
		int yPos = getyPos();
		
		
		reset();
		forward(length/2);
		turnRight();
		forward(length/2);
		turnLeft();
		
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}
		
		//going back to the original position after this command has been issued.
		setxPos(xPos);
		setyPos(yPos);
		
		//fixing teleport issues.
		penUp();
		forward(0);
		penDown();
	}
	
	
	public void penColour(int colourR, int colourG, int colourB)
	{
		try
		{
			Color c = new Color(colourR,colourG,colourB);
			setPenColour(c);
		}
		catch(Exception e)
		{
			//In case our of bound arguments are given.
			displayMessage("Color parameter outside of expected range: Red:255 Green:255 Blue:255");
		}
	}
	
	
	public void penWidth(int width)
	{
		setStroke(width);
	}
	
	public void triangle(int length)
	{
		//Draws a triangle with equal sides.
		turnLeft();
		penDown();
			
		int i;
		for(i=0;i<3;i++)
		{
			
			forward(length);
			
			if(i<2)
			{
				turnLeft(120);
			}
			
		}
	}
	
	
	public void triangle(int lengthOne, int lengthTwo, int lengthThree)
	{	
		//overloading triangle function.
		//Draws a triangle with specific sides.
	
		double a,b,largestLengthC,angleA,angleB,angleC;
		
		if(lengthOne>lengthTwo && lengthOne>lengthThree)
		{
			//case where lengthOne is the largest
			
			a = lengthTwo;
			b = lengthThree;
			
			largestLengthC = lengthOne;
			
		}
		else if(lengthTwo>lengthOne && lengthTwo>lengthThree)
		{
			//case where lengthTwo is the largest
			a = lengthOne;
			b = lengthThree;
			
			largestLengthC = lengthTwo;
		}
		else
		{	
			//case where lengthThree is the largest
			a = lengthOne;
			b = lengthTwo;
			
			largestLengthC = lengthThree;
		}
		
				
		//Using Cosine Law to find the largest angle vai the longest side.
		//c^2 = a^2 + b^2 -2*a*b*Cos(angle)
		//Cos(angle) =  -(c^2 - (a^2+b^2)) / 2ab
		//angle = cos*-1( -(c^2 - (a^2+b^2)) / 2ab) )
		double value;
		value = -(Math.pow(largestLengthC, 2) - ( Math.pow(a, 2) + Math.pow(b, 2))) /(2*a*b) ;
		angleC = Math.toDegrees(Math.acos(value)); // returns the angleC degree
		
		//using Sine Law to find the other angles.
		//sideA/sinA = sideB/sinB = sideC/sinC
		//A = (sin(c)*a/c)sin^-1
		//B = (sin(c)*b/c)sin^-1
		angleA = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (a/largestLengthC) ) );
		angleB = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (b/largestLengthC) ) );
		
		turnLeft();
		forward((int) largestLengthC);
		
		turnLeft(180 - (int) angleB);
		forward((int) a);
		
		turnLeft(180 - (int) angleC );
		forward((int) b);
		
		turnLeft(180 - (int) angleA);
		
	}
	
	public void hexagram(int length)
	{
		//Heron's formula 
		//s = (a+b+c)/2
		//a = sq(s(s-a)(s-b)(s-c))
		double s = (length+length+length)/2;
		double areaOfTriangle = Math.sqrt(s*((s-length)*(s-length)*(s-length)));
		
		//h=(2*A)/b
		//can also be said to be the median
		double heightOfTriangle = (2*areaOfTriangle)/length;
		
		//the distance between the vertex and the centroid of a triangle is 2/3 of the median of the triangle.
		int midPoint = (int) (heightOfTriangle/3)*2;	
		
		triangle(length);
		turnLeft(120);
		turnLeft(30);
		penUp();
		forward((int) midPoint);
		forward((int) midPoint);
		penDown();
		turnLeft(150);
		forward(length);
		turnLeft(120);
		forward(length);
		turnLeft(120);
		forward(length);
	}
	
	public void hexagon(int length)
	{
		turnLeft();
		penDown();
		
		for(int i=0;i<=5;i++)
		{
			forward(length);
			turnLeft(60);
		}

	}
	
	public void octagram(int length)
	{
		square(length);
		
		//fixing position for 2nd sqaure.
		penUp();
		turnLeft();
		forward(length/2);
		turnLeft();
		forward(length/2);
		turnLeft(45);
		forward(length/2);
		turnLeft();
		forward(length/2);
		
		square(length);
	}
	
	public void octagon(int length)
	{
		turnLeft();
		penDown();
		
		for(int i=0;i<=7;i++)
		{
			forward(length);
			turnLeft(45);
		}
	}
	
	public void rgbModeOn()
	{
		int[] rgbValue = {255,255,255};
		Random randObj = new Random();
		
		rgbModeBool = true;
		
		//Loops through the RGB value until RGB mode is turned off.
		while(rgbModeBool == true)
		{
			int i = randObj.nextInt(0,3);
			
			if(rgbValue[i] == 255)
			{
				while(rgbValue[i] > 0)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					
					try
					{
						//Updates Help UI
						currentColor.setBackground(getPenColour());
					}
					catch(Exception e)
					{
						//In case Help UI is not visible
					}

					--rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 	
					catch (InterruptedException e) 
					{
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
			else if(rgbValue[i]==0)
			{
				while(rgbValue[i] < 255)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					
					try
					{
						//Updates Help UI
						currentColor.setBackground(getPenColour());
					}
					catch(Exception e)
					{
						//In case Help UI is not visible
					}
					
					++rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 
					catch (InterruptedException e) 
					{
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
		}
		
	}
	
	public void rgbModeOff()
	{
		//Turns off RGB mode.
		rgbModeBool = false;
	}
	
	public void colorChooser()
	{
		Color newColor = JColorChooser.showDialog(null,"Choose Color", getPenColour());
		setPenColour(newColor);
		
		try
		{
			//Updates Help UI 
			currentColor.setBackground(getPenColour());
		}
		catch(Exception e)
		{
			//Does noting if Help window is not opened
		}
	}
	
	public void Help()
	{
		
		try
		{	
			//closes Help window if it already exists
			helpWindow.dispose();
		}
		catch(Exception e)
		{
			
		}
		
		//Help window MainFrame
		helpWindow = new JFrame("Help Window");
		helpWindow.setLocation(860,20);
		helpWindow.setVisible(true);
		helpWindow.setSize(600,600);
		helpWindow.setLayout(new FlowLayout());
		helpWindow.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		helpWindow.addWindowListener(new HelpWindowListenerClass());
		
		//command list panel
		JPanel commandList = new JPanel();
		commandList.setPreferredSize(new Dimension(200,600));
		commandList.setLayout(new BoxLayout(commandList,BoxLayout.Y_AXIS));
		
		//an Array of JLabel class references
		JLabel[] commandAvailable = new JLabel[commandCollection.length];
		
		for(int i=0;i<commandCollection.length;i++)
		{
			//referencing each reference variable with an JLabel object.
			//Specifies each JLabel object with Command names.
			commandAvailable[i] = new JLabel();
			commandAvailable[i].setText(i+1+". "+commandCollection[i]);
			commandAvailable[i].setPreferredSize(new Dimension(200,50));
			
			//adds each JLabel object into commandList panel, one by one.
			commandList.add(commandAvailable[i]);
		}
		
		
		//UI panel
		JPanel helpUI = new JPanel();
		helpUI.setPreferredSize(new Dimension(400,600));
		helpUI.setLayout(new BoxLayout(helpUI,BoxLayout.Y_AXIS));
		
		//RGB value slider
		rValue = new JSlider(JSlider.HORIZONTAL,0,255,255);
		rValue.setPaintTicks(true);
		rValue.setPaintLabels(true);
		rValue.setMajorTickSpacing(51);
		rValue.addChangeListener(new SliderListenerClass());
		
		gValue = new JSlider(JSlider.HORIZONTAL,0,255,0);
		gValue.setPaintTicks(true);
		gValue.setPaintLabels(true);
		gValue.setMajorTickSpacing(51);
		gValue.addChangeListener(new SliderListenerClass());
		
		bValue = new JSlider(JSlider.HORIZONTAL,0,255,0);
		bValue.setPaintTicks(true);
		bValue.setPaintLabels(true);
		bValue.setMajorTickSpacing(51);
		bValue.addChangeListener(new SliderListenerClass());
		
		//adding sliders into HelpUI panel
		helpUI.add(new JLabel("R"));
		helpUI.add(rValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		helpUI.add(new JLabel("G"));
		helpUI.add(gValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		helpUI.add(new JLabel("B"));
		helpUI.add(bValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		
		//CurrentColor checker
		currentColor = new JPanel();
		currentColor.setPreferredSize(new Dimension(50,50));
		currentColor.setBackground(getPenColour());
		currentColor.setBorder(BorderFactory.createLoweredBevelBorder());
		
		//adding current color panel to helpUI panel
		helpUI.add(currentColor);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		//Adding helpUI & commandList panels into the Main frame
		helpWindow.getContentPane().add(commandList);
		helpWindow.getContentPane().add(helpUI);
		helpWindow.pack();
	}
	
	public void ticTacToe()
	{
		clear();
		
		//indicating the game is called.
		ticTacToeBoolean = true;
		
		for(int i=0;i<ticTacToeBox.length;i++)
		{
			//setting all ticTacToeBox references false for initial game starting
			//indicates weather it is occupied or not.
			ticTacToeBox[i] = false;
		}
		
		for(int i=0;i<ticTacToeBoxOwner.length;i++)
		{
			//setting all ticTacToeBoxOwner references as null-'n' for initial game starting.
			ticTacToeBoxOwner[i] = 'n';
		}
		
		penDown();
		penWidth(6);
		setPenColour(Color.white);
		//each position area is of 100*100
		
		//vertical line
		setxPos(300);
		setyPos(50);
		forward(300);
		
		setxPos(400);
		setyPos(50);
		forward(300);
		
		//horizontal line
		setxPos(200);
		setyPos(150);
		turnLeft();
		forward(300);
		
		setxPos(200);
		setyPos(250);
		forward(300);
		
		//default position for turtle
		reset();
		penUp();
		penWidth(6);
		setxPos(600);
		setyPos(100);
		forward(1);
		setTurtleSpeed(0);
		
		
	}
	
	public void ticTacToeExit()
	{
		//indicating the game has ended.
		
		if(ticTacToeBoolean == true)
		{
			//only execute if the game is running
			ticTacToeBoolean = false;
			
			
			clear();
			reset();
			penDown();
		}
		
		//resets the speed to normal
		setTurtleSpeed(1);

	}
	
	
	public void processCommand(String command)
	{	
		//Prints the Command Entered.
		displayMessage("Command Entered: "+command);
		
		//Splitting Entered Command into An array of String objects.
		String[] commandEntered = command.split(" ");
		
		//Method parameter values.
		int[] enteredParameterValue = new int[3];
		
		//Collection Class ArrayList for accepted commands.
		ArrayList acceptedCommandCollection = new ArrayList();
		
		for(String i: commandCollection)
		{	
			//Adding Accepted Commands
			acceptedCommandCollection.add(i);
		}
		
		
		//Command validation is done first.
		//parameter validation is done second.
		if(acceptedCommandCollection.contains(commandEntered[0].toLowerCase()))
		{
			//Valid Command Case.
			
			//Case where too many parameters are entered.
			if(commandEntered.length>4)
			{	
				displayMessage("Too many parameters entered.");
				
				//Ends function Execution in case of error.
				return;
			}
			
			//Parameter Filtering & conversion.
			switch(commandEntered.length)
			{		
				case 2:
					//One parameter Case
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
					
				case 3:
					//two parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
								
				case 4:	
					//Three parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
						enteredParameterValue[2] = Integer.parseInt(commandEntered[3]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0 || enteredParameterValue[2]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;		
			}
			
			
			
			//Command filtering.
			switch(commandEntered[0].toLowerCase())
			{
				case "about":
					about();
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "reset":
					setxPos(400);
					setyPos(200);
					reset();
					penColour(255,0,0);
					break;
					
				case "penup":
					penUp();
					break;
					
				case "pendown":
					penDown();
					break;
					
				case "turnleft":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnLeft(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnLeft();
					}
					break;
					
				case "turnright":
					
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnRight(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnRight();
					}				
					break;
					
				case "forward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "backward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]-(enteredParameterValue[0]*2));
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "black":					
					//Sets pen color to black.
					setPenColour(Color.black);
					break;
					
				case "green":
					//Sets pen color to green.
					setPenColour(Color.green);
					break;
					
				case "red":				
					//Sets pen color to red.
					setPenColour(Color.red);			
					break;
					
				case "white":
					//Sets pen color to white.
					setPenColour(Color.white);					
					break;
					
				case "clear":
					if(saveCounter == true)
					{
						//Clears the display
						clear();
						
						//Clears the String buffer.
						strBufferObj.delete(0,strBufferObj.length());
						
						return;
					}
					else
					{
						//Non-Saved image case.
						
						int choice = JOptionPane.showConfirmDialog(null, "Current image/commands is not saved! Do you wish to Continue?");
						
						if(choice == JOptionPane.YES_OPTION)
						{
							//clears the display
							clear();
							
							//Clears the String buffer after each save.
							strBufferObj.delete(0,strBufferObj.length());
							
							//save counter True to symbolize saved status.
							saveCounter = true;
						}
						
						//returns statement to avoid being added to the string command buffer
						return;
					}
					
				case "save":
					try
					{
						//Save Image
						File savedImage = new File("savedImage.png");
						BufferedImage bufferedImageObjSave  = getBufferedImage();
						ImageIO.write(bufferedImageObjSave,"png", savedImage);
						
						//Saves Command
						File savedCommand = new File("savedCommand.txt");
						FileWriter fWriterObj = new FileWriter(savedCommand);
						BufferedWriter bWriterObj = new BufferedWriter(fWriterObj);
						bWriterObj.write(strBufferObj.toString());
						bWriterObj.close();
						
						//Clears the String buffer after each save.
						strBufferObj.delete(0,strBufferObj.length());
						
						//save counter True to symbolize saved status.
						saveCounter = true;
						
						//save dialog box
						JOptionPane.showMessageDialog(null, "Image & command Saved!");
						
						//returns statement to avoid being added to the string command buffer
						return;						
					}
					catch(Exception e)
					{
						displayMessage("Error Saving Image");
					}	
					break;
					
				case "load":
					
					if(saveCounter == true)
					{
						try
						{	
							//reset turtle position.
							reset();
							penDown();
							
							//Load Image
							File loadImage = new File("savedImage.png");
							BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
							setBufferedImage(bufferedImageObjLoad);
							
							
							//load Saved Commands.
							File savedCommand = new File("savedCommand.txt");
							FileReader fReaderObj = new FileReader(savedCommand);
							BufferedReader bReaderObj = new BufferedReader(fReaderObj);
													
							String line = bReaderObj.readLine(); //reads the first line of command file.
							while(line != null)
							{	
								processCommand(line);
								line = bReaderObj.readLine();
							}
							bReaderObj.close();
							
							//save counter True to symbolize saved status.
							saveCounter = true;
							
							//returns statement to avoid being added to the string command buffer
							return;
						}
						catch(Exception e)
						{
							displayMessage("Error Loading Image");
						}
					}
					else
					{	
						//Non-Saved image case.
						
						int choice = JOptionPane.showConfirmDialog(null, "Current image/commands is not saved! Do you wish to Continue?");
						
						if(choice == JOptionPane.YES_OPTION)
						{
							//save counter True to symbolize saved status.
							saveCounter = true;
							
							//load the old image
							processCommand("load");
						}
						
						//returns statement to avoid being added to the string command buffer
						return;
					}
					break;
					
					
				case "square":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						square(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "squarecentered":
					//Centered version of square method.
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						squareCentered(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "pencolour":
					if(commandEntered.length==4)
					{
						//Case where parameter is given - command + value.
						penColour(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;
					
					
				case "penwidth":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						penWidth(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;	
					
					
				case "triangle":
					if(commandEntered.length == 2)
					{
						//Case where one parameter is given - command + value.
						triangle(enteredParameterValue[0]);
					}
					else if(commandEntered.length == 4)
					{
						//Case where three parameter are given - command + parameter list.
						triangle(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "hexagram":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						hexagram(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;
					
				case "hexagon":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						hexagon(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;
					
				case "octagram":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						octagram(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "octagon":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						octagon(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "circle":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						circle(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "rgbmodeon":
					rgbModeOn();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
					
				case "rgbmodeoff":
					rgbModeOff();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "colorchooser":
					colorChooser();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "mousemodeon":
					mouseModeBool = true;
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "mousemodeoff":
					mouseModeBool = false;
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "help":
					Help();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "tictactoe":
					//Tic Tac Toe - Them game.
					ticTacToe();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "tictactoeexit":
					//Tic Tac Toe - Them game escape.
					ticTacToeExit();
					
					//Avoids being added to the string buffer/ saved commands
					return;
			}
			
		}
		else
		{	
			//invalid Command Case.
			displayMessage("Invalid Command.");
		}
		
		
		//Commands Entered into string buffer
		strBufferObj.append(command+"\n");
		
		try
		{
			//Updates Help UI 
			currentColor.setBackground(getPenColour());
		}
		catch(Exception e)
		{
			//Does noting if Help window is not opened
		}
		
	}
	
	
	
	//inner classes
	//WindowListener for Main Frame.
	private class WindowListenerClass extends WindowAdapter
	{

		public void windowClosing(WindowEvent event)
		{
			
			if(saveCounter == true)
			{
				event.getWindow().dispose();
			}
			else
			{
				int result = JOptionPane.showConfirmDialog(null, "The current image is not saved, do you wish to exit?");
				
				if(result == JOptionPane.YES_OPTION)
				{
					event.getWindow().dispose();
				}
			}
			
		}

	}
	
	//MouseMotionListener class for Main Frame
	private class MouseMotionListenerClass extends MouseMotionAdapter
	{
		
		public void mouseMoved(MouseEvent mEvent)
		{	
			if(mouseModeBool == true)
			{
				//sets turtle positions relative to the mouse position
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnLeft(2);
				  
			}
		}
		
		public void mouseDragged(MouseEvent mEvent)
		{
			if(mouseModeBool == true)
			{
			    //sets turtle positions relative to the mouse position
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnRight(2);
				
				//gets the graphical context on the invocation frame
			    Graphics frameGraphicContext = getGraphicsContext();
			    
			    //setColor
			    frameGraphicContext.setColor(getPenColour());  
			    
			    //initial width set to 0 for fillRoundRect()
			    int penSize = (int) getStroke()+1;
			    
				//Drawing on the Turtle graphical context frame
				frameGraphicContext.fillRoundRect(mEvent.getX()-40,mEvent.getY()-40,penSize,penSize,penSize,penSize);
				
				//save counter False to symbolize Unsaved status as changes have been made..
				saveCounter = false;

			}
		}
		
	}
	
	//MouseMotionListener class for Main Frame
	private class MouseListenerClass extends MouseAdapter
	{
		public void mousePressed(MouseEvent mEvent)
		{
			if(mouseModeBool == true)
			{
				//Same as mouseDragged method but only executed every time the mouse is clicked.
				
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnRight(2);
				
				//gets the graphical context on the invocation frame
			    Graphics frameGraphicContext = getGraphicsContext();
			    
			    //setColor
			    frameGraphicContext.setColor(getPenColour());  
			    
			    //initial width set to 0 for fillRoundRect()
			    int penSize = (int) getStroke()+1;
			    
				//Drawing on the Turtle graphical context frame
				frameGraphicContext.fillRoundRect(mEvent.getX()-40,mEvent.getY()-40,penSize,penSize,penSize,penSize);
				
				//save counter False to symbolize Unsaved status as changes have been made..
				saveCounter = false;
			}
		}
		
		public void mouseClicked(MouseEvent mEvent)
		{
			//if TicTacToe is Started
			if(ticTacToeBoolean == true)
			{
				//mouse co-od
				int x = mEvent.getX();
				int y = mEvent.getY();
				
				//default position for turtle
				reset();
				penUp();
				penWidth(6);
				setxPos(600);
				setyPos(100);
				forward(1);


				if(x<=300 && x>200)
				{
					if(y<=150 && y>50)
					{
						//box 1
						if(ticTacToeBox[0] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[0] = 'o';
									
									setxPos(200);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[0] = 'x';
									
									drawLine(getPenColour(),200, 150, 300, 50);
									drawLine(getPenColour(),300, 150, 200, 50);
										
									
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[0] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=250 && y>150)
					{
						//box 2
						if(ticTacToeBox[1] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[1] = 'o';
									
									setxPos(200);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[1] = 'x';
									
									drawLine(getPenColour(),200, 250, 300, 150);
									drawLine(getPenColour(),300, 250, 200, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[1] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 3
						if(ticTacToeBox[2] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[2] = 'o';
									
									setxPos(200);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[2] = 'x';
									
									drawLine(getPenColour(),200, 350, 300, 250);
									drawLine(getPenColour(),300, 350, 200, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[2] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				else if(x<=400 && x>300)
				{
					if(y<=150 && y>50)
					{
						//box 4
						if(ticTacToeBox[3] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[3] = 'o';
									
									setxPos(300);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[3] = 'x';
									
									drawLine(getPenColour(),300, 150, 400, 50);
									drawLine(getPenColour(),400, 150, 300, 50);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[3] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=250 && y>150)
					{
						//box 5
						if(ticTacToeBox[4] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[4] = 'o';
									
									setxPos(300);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[4] = 'x';
									
									drawLine(getPenColour(),300, 250, 400, 150);
									drawLine(getPenColour(),400, 250, 300, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[4] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 6
						if(ticTacToeBox[5] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[5] = 'o';
									
									setxPos(300);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[5] = 'x';
									
									drawLine(getPenColour(),300, 350, 400, 250);
									drawLine(getPenColour(),400, 350, 300, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[5] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				else if(x<=500 && x>400)
				{
					if(y<=150 && y>50)
					{
						//box 7
						if(ticTacToeBox[6] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[6] = 'o';
									
									setxPos(400);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[6] = 'x';
									
									drawLine(getPenColour(),400, 150, 500, 50);
									drawLine(getPenColour(),500, 150, 400, 50);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[6] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
						
					}
					else if(y<=250 && y>150)
					{
						//box 8
						if(ticTacToeBox[7] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[7] = 'o';
									
									setxPos(400);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[7] = 'x';
									
									drawLine(getPenColour(),400, 250, 500, 150);
									drawLine(getPenColour(),500, 250, 400, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[7] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 9
						if(ticTacToeBox[8] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[8] = 'o';
									
									setxPos(400);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[8] = 'x';
									
									drawLine(getPenColour(),400, 350, 500, 250);
									drawLine(getPenColour(),500, 350, 400, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[8] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				int i=0;
				while(i<9)
				{
					if(ticTacToeBoxOwner[i] == 'o' && ticTacToeBoxOwner[1] == 'o' && ticTacToeBoxOwner[2]=='o')
					{
						JOptionPane.showMessageDialog(null, "Player Circle Wins!");
					}
					else if(ticTacToeBoxOwner[0] == 'x' && ticTacToeBoxOwner[1] == 'x' && ticTacToeBoxOwner[2]=='x')
					{
						JOptionPane.showMessageDialog(null, "Player Cross Wins!");
					}
					i+4

				}


			}
			
			
		}
	}
	
	//Listener classes for the Help menu
	//Slider Listener class for help menu
	private class SliderListenerClass implements ChangeListener
	{
		public void stateChanged(ChangeEvent e) 
		{
			penColour(rValue.getValue(),gValue.getValue(),bValue.getValue());
			currentColor.setBackground(getPenColour());
		}
	}
	
	//Windows Listener class for help menu
	private class HelpWindowListenerClass extends WindowAdapter
	{

		public void windowClosing(WindowEvent event)
		{
			//close MainFrame window
			event.getWindow().dispose();
		}
		
	}
	
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-05-11 05:04:29.852
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-05-11 05:04:29.852
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-11 05:04:31.713
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package graphicsProgramFinalAssignmentOOP;

import uk.ac.leedsbeckett.oop.LBUGraphics;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.*;
import java.awt.Dimension;
import java.awt.Graphics;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JOptionPane;
import javax.swing.JColorChooser;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.util.ArrayList;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;

import java.util.Random;

import java.sql.DriverManager;
import java.sql.Connection;


public class GraphicsSystem extends LBUGraphics
{	
	//Array of accepted commands.
	private String[] commandCollection = {"about","penup","pendown","turnleft","turnright","forward","backward","black","green","red","white","reset","clear","save","load","square","squarecentered","pencolour","penwidth","triangle","hexagram","hexagon","octagram","octagon","circle","rgbmodeon","rgbmodeoff","colorchooser","mousemodeon","mousemodeoff","help","tictactoe","tictactoeexit"};
	
	//save counter
	private boolean saveCounter = true;
	
	//Command Entered Buffer
	private StringBuffer strBufferObj = new StringBuffer();
	
	//RGB mode counter
	private boolean rgbModeBool = false;
	
	//Help menu
	private JFrame helpWindow;
	private JSlider rValue,gValue,bValue;
	private JPanel currentColor;
	
	//mouse mode counter
	private boolean mouseModeBool = false;
	
	//Tic Tac Toe - game mode one or off
	private boolean ticTacToeBoolean = false;
	
	//ticTacToe box occupied counter
	private boolean[] ticTacToeBox = new boolean[9];
	
	//ticTacToe Box occupied player
	private char[] ticTacToeBoxOwner = new char[9];
	
	//Player Turn
	//cross = x
	//circle = o
	//initial turn for circle
	private char turn = 'o';

	public static void main(String[] args)
	{
		try
		{
			//register driver.
			Class.forName("com.mysql.cj.jdbc.Driver");
			//establishing connection to check for Database availability.
			Connection co = DriverManager.getConnection("jdbc:mysql://localhost:3306/turtlegraphicdata","root","");
			//closing test connection.
			co.close();
			
			//Database login 
			new DatabaseLogin();
			
		}
		catch(Exception e)
		{
			//database link failure - automatically opens turtleGraphic.
			new GraphicsSystem();
		}


	}
	
	
	public GraphicsSystem()
	{
        JFrame MainFrame = new JFrame(); 
        MainFrame.setLocation(20,20);
        MainFrame.setLayout(new FlowLayout());    
        MainFrame.add(this);                       
        MainFrame.setSize(850,450);               
        MainFrame.setVisible(true);   
        MainFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        MainFrame.addWindowListener(new WindowListenerClass());
        MainFrame.addMouseMotionListener(new MouseMotionListenerClass());
        MainFrame.addMouseListener(new MouseListenerClass());
        
        
        //about();
        reset();
        penDown();
	}

	
	public void about()
	{
		//overriding the about method.
	
		try
		{
			File loadImage = new File("name.png");
			BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
			setBufferedImage(bufferedImageObjLoad);
		}
		catch(Exception e)
		{
			displayMessage("Error loading Name");
		}
		
		//calling the parent class about method.
		super.about();

	}
	
	public void square(int length)
	{	
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}

	}
	
	public void squareCentered(int length)
	{	
		//initial position.
		int xPos = getxPos();
		int yPos = getyPos();
		
		
		reset();
		forward(length/2);
		turnRight();
		forward(length/2);
		turnLeft();
		
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}
		
		//going back to the original position after this command has been issued.
		setxPos(xPos);
		setyPos(yPos);
		
		//fixing teleport issues.
		penUp();
		forward(0);
		penDown();
	}
	
	
	public void penColour(int colourR, int colourG, int colourB)
	{
		try
		{
			Color c = new Color(colourR,colourG,colourB);
			setPenColour(c);
		}
		catch(Exception e)
		{
			//In case our of bound arguments are given.
			displayMessage("Color parameter outside of expected range: Red:255 Green:255 Blue:255");
		}
	}
	
	
	public void penWidth(int width)
	{
		setStroke(width);
	}
	
	public void triangle(int length)
	{
		//Draws a triangle with equal sides.
		turnLeft();
		penDown();
			
		int i;
		for(i=0;i<3;i++)
		{
			
			forward(length);
			
			if(i<2)
			{
				turnLeft(120);
			}
			
		}
	}
	
	
	public void triangle(int lengthOne, int lengthTwo, int lengthThree)
	{	
		//overloading triangle function.
		//Draws a triangle with specific sides.
	
		double a,b,largestLengthC,angleA,angleB,angleC;
		
		if(lengthOne>lengthTwo && lengthOne>lengthThree)
		{
			//case where lengthOne is the largest
			
			a = lengthTwo;
			b = lengthThree;
			
			largestLengthC = lengthOne;
			
		}
		else if(lengthTwo>lengthOne && lengthTwo>lengthThree)
		{
			//case where lengthTwo is the largest
			a = lengthOne;
			b = lengthThree;
			
			largestLengthC = lengthTwo;
		}
		else
		{	
			//case where lengthThree is the largest
			a = lengthOne;
			b = lengthTwo;
			
			largestLengthC = lengthThree;
		}
		
				
		//Using Cosine Law to find the largest angle vai the longest side.
		//c^2 = a^2 + b^2 -2*a*b*Cos(angle)
		//Cos(angle) =  -(c^2 - (a^2+b^2)) / 2ab
		//angle = cos*-1( -(c^2 - (a^2+b^2)) / 2ab) )
		double value;
		value = -(Math.pow(largestLengthC, 2) - ( Math.pow(a, 2) + Math.pow(b, 2))) /(2*a*b) ;
		angleC = Math.toDegrees(Math.acos(value)); // returns the angleC degree
		
		//using Sine Law to find the other angles.
		//sideA/sinA = sideB/sinB = sideC/sinC
		//A = (sin(c)*a/c)sin^-1
		//B = (sin(c)*b/c)sin^-1
		angleA = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (a/largestLengthC) ) );
		angleB = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (b/largestLengthC) ) );
		
		turnLeft();
		forward((int) largestLengthC);
		
		turnLeft(180 - (int) angleB);
		forward((int) a);
		
		turnLeft(180 - (int) angleC );
		forward((int) b);
		
		turnLeft(180 - (int) angleA);
		
	}
	
	public void hexagram(int length)
	{
		//Heron's formula 
		//s = (a+b+c)/2
		//a = sq(s(s-a)(s-b)(s-c))
		double s = (length+length+length)/2;
		double areaOfTriangle = Math.sqrt(s*((s-length)*(s-length)*(s-length)));
		
		//h=(2*A)/b
		//can also be said to be the median
		double heightOfTriangle = (2*areaOfTriangle)/length;
		
		//the distance between the vertex and the centroid of a triangle is 2/3 of the median of the triangle.
		int midPoint = (int) (heightOfTriangle/3)*2;	
		
		triangle(length);
		turnLeft(120);
		turnLeft(30);
		penUp();
		forward((int) midPoint);
		forward((int) midPoint);
		penDown();
		turnLeft(150);
		forward(length);
		turnLeft(120);
		forward(length);
		turnLeft(120);
		forward(length);
	}
	
	public void hexagon(int length)
	{
		turnLeft();
		penDown();
		
		for(int i=0;i<=5;i++)
		{
			forward(length);
			turnLeft(60);
		}

	}
	
	public void octagram(int length)
	{
		square(length);
		
		//fixing position for 2nd sqaure.
		penUp();
		turnLeft();
		forward(length/2);
		turnLeft();
		forward(length/2);
		turnLeft(45);
		forward(length/2);
		turnLeft();
		forward(length/2);
		
		square(length);
	}
	
	public void octagon(int length)
	{
		turnLeft();
		penDown();
		
		for(int i=0;i<=7;i++)
		{
			forward(length);
			turnLeft(45);
		}
	}
	
	public void rgbModeOn()
	{
		int[] rgbValue = {255,255,255};
		Random randObj = new Random();
		
		rgbModeBool = true;
		
		//Loops through the RGB value until RGB mode is turned off.
		while(rgbModeBool == true)
		{
			int i = randObj.nextInt(0,3);
			
			if(rgbValue[i] == 255)
			{
				while(rgbValue[i] > 0)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					
					try
					{
						//Updates Help UI
						currentColor.setBackground(getPenColour());
					}
					catch(Exception e)
					{
						//In case Help UI is not visible
					}

					--rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 	
					catch (InterruptedException e) 
					{
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
			else if(rgbValue[i]==0)
			{
				while(rgbValue[i] < 255)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					
					try
					{
						//Updates Help UI
						currentColor.setBackground(getPenColour());
					}
					catch(Exception e)
					{
						//In case Help UI is not visible
					}
					
					++rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 
					catch (InterruptedException e) 
					{
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
		}
		
	}
	
	public void rgbModeOff()
	{
		//Turns off RGB mode.
		rgbModeBool = false;
	}
	
	public void colorChooser()
	{
		Color newColor = JColorChooser.showDialog(null,"Choose Color", getPenColour());
		setPenColour(newColor);
		
		try
		{
			//Updates Help UI 
			currentColor.setBackground(getPenColour());
		}
		catch(Exception e)
		{
			//Does noting if Help window is not opened
		}
	}
	
	public void Help()
	{
		
		try
		{	
			//closes Help window if it already exists
			helpWindow.dispose();
		}
		catch(Exception e)
		{
			
		}
		
		//Help window MainFrame
		helpWindow = new JFrame("Help Window");
		helpWindow.setLocation(860,20);
		helpWindow.setVisible(true);
		helpWindow.setSize(600,600);
		helpWindow.setLayout(new FlowLayout());
		helpWindow.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		helpWindow.addWindowListener(new HelpWindowListenerClass());
		
		//command list panel
		JPanel commandList = new JPanel();
		commandList.setPreferredSize(new Dimension(200,600));
		commandList.setLayout(new BoxLayout(commandList,BoxLayout.Y_AXIS));
		
		//an Array of JLabel class references
		JLabel[] commandAvailable = new JLabel[commandCollection.length];
		
		for(int i=0;i<commandCollection.length;i++)
		{
			//referencing each reference variable with an JLabel object.
			//Specifies each JLabel object with Command names.
			commandAvailable[i] = new JLabel();
			commandAvailable[i].setText(i+1+". "+commandCollection[i]);
			commandAvailable[i].setPreferredSize(new Dimension(200,50));
			
			//adds each JLabel object into commandList panel, one by one.
			commandList.add(commandAvailable[i]);
		}
		
		
		//UI panel
		JPanel helpUI = new JPanel();
		helpUI.setPreferredSize(new Dimension(400,600));
		helpUI.setLayout(new BoxLayout(helpUI,BoxLayout.Y_AXIS));
		
		//RGB value slider
		rValue = new JSlider(JSlider.HORIZONTAL,0,255,255);
		rValue.setPaintTicks(true);
		rValue.setPaintLabels(true);
		rValue.setMajorTickSpacing(51);
		rValue.addChangeListener(new SliderListenerClass());
		
		gValue = new JSlider(JSlider.HORIZONTAL,0,255,0);
		gValue.setPaintTicks(true);
		gValue.setPaintLabels(true);
		gValue.setMajorTickSpacing(51);
		gValue.addChangeListener(new SliderListenerClass());
		
		bValue = new JSlider(JSlider.HORIZONTAL,0,255,0);
		bValue.setPaintTicks(true);
		bValue.setPaintLabels(true);
		bValue.setMajorTickSpacing(51);
		bValue.addChangeListener(new SliderListenerClass());
		
		//adding sliders into HelpUI panel
		helpUI.add(new JLabel("R"));
		helpUI.add(rValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		helpUI.add(new JLabel("G"));
		helpUI.add(gValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		helpUI.add(new JLabel("B"));
		helpUI.add(bValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		
		//CurrentColor checker
		currentColor = new JPanel();
		currentColor.setPreferredSize(new Dimension(50,50));
		currentColor.setBackground(getPenColour());
		currentColor.setBorder(BorderFactory.createLoweredBevelBorder());
		
		//adding current color panel to helpUI panel
		helpUI.add(currentColor);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		//Adding helpUI & commandList panels into the Main frame
		helpWindow.getContentPane().add(commandList);
		helpWindow.getContentPane().add(helpUI);
		helpWindow.pack();
	}
	
	public void ticTacToe()
	{
		clear();
		
		//indicating the game is called.
		ticTacToeBoolean = true;
		
		for(int i=0;i<ticTacToeBox.length;i++)
		{
			//setting all ticTacToeBox references false for initial game starting
			//indicates weather it is occupied or not.
			ticTacToeBox[i] = false;
		}
		
		for(int i=0;i<ticTacToeBoxOwner.length;i++)
		{
			//setting all ticTacToeBoxOwner references as null-'n' for initial game starting.
			ticTacToeBoxOwner[i] = 'n';
		}
		
		penDown();
		penWidth(6);
		setPenColour(Color.white);
		//each position area is of 100*100
		
		//vertical line
		setxPos(300);
		setyPos(50);
		forward(300);
		
		setxPos(400);
		setyPos(50);
		forward(300);
		
		//horizontal line
		setxPos(200);
		setyPos(150);
		turnLeft();
		forward(300);
		
		setxPos(200);
		setyPos(250);
		forward(300);
		
		//default position for turtle
		reset();
		penUp();
		penWidth(6);
		setxPos(600);
		setyPos(100);
		forward(1);
		setTurtleSpeed(0);
		
		
	}
	
	public void ticTacToeExit()
	{
		//indicating the game has ended.
		
		if(ticTacToeBoolean == true)
		{
			//only execute if the game is running
			ticTacToeBoolean = false;
			
			
			clear();
			reset();
			penDown();
		}
		
		//resets the speed to normal
		setTurtleSpeed(1);

	}
	
	
	public void processCommand(String command)
	{	
		//Prints the Command Entered.
		displayMessage("Command Entered: "+command);
		
		//Splitting Entered Command into An array of String objects.
		String[] commandEntered = command.split(" ");
		
		//Method parameter values.
		int[] enteredParameterValue = new int[3];
		
		//Collection Class ArrayList for accepted commands.
		ArrayList acceptedCommandCollection = new ArrayList();
		
		for(String i: commandCollection)
		{	
			//Adding Accepted Commands
			acceptedCommandCollection.add(i);
		}
		
		
		//Command validation is done first.
		//parameter validation is done second.
		if(acceptedCommandCollection.contains(commandEntered[0].toLowerCase()))
		{
			//Valid Command Case.
			
			//Case where too many parameters are entered.
			if(commandEntered.length>4)
			{	
				displayMessage("Too many parameters entered.");
				
				//Ends function Execution in case of error.
				return;
			}
			
			//Parameter Filtering & conversion.
			switch(commandEntered.length)
			{		
				case 2:
					//One parameter Case
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
					
				case 3:
					//two parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
								
				case 4:	
					//Three parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
						enteredParameterValue[2] = Integer.parseInt(commandEntered[3]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0 || enteredParameterValue[2]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;		
			}
			
			
			
			//Command filtering.
			switch(commandEntered[0].toLowerCase())
			{
				case "about":
					about();
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "reset":
					setxPos(400);
					setyPos(200);
					reset();
					penColour(255,0,0);
					break;
					
				case "penup":
					penUp();
					break;
					
				case "pendown":
					penDown();
					break;
					
				case "turnleft":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnLeft(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnLeft();
					}
					break;
					
				case "turnright":
					
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnRight(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnRight();
					}				
					break;
					
				case "forward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "backward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]-(enteredParameterValue[0]*2));
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "black":					
					//Sets pen color to black.
					setPenColour(Color.black);
					break;
					
				case "green":
					//Sets pen color to green.
					setPenColour(Color.green);
					break;
					
				case "red":				
					//Sets pen color to red.
					setPenColour(Color.red);			
					break;
					
				case "white":
					//Sets pen color to white.
					setPenColour(Color.white);					
					break;
					
				case "clear":
					if(saveCounter == true)
					{
						//Clears the display
						clear();
						
						//Clears the String buffer.
						strBufferObj.delete(0,strBufferObj.length());
						
						return;
					}
					else
					{
						//Non-Saved image case.
						
						int choice = JOptionPane.showConfirmDialog(null, "Current image/commands is not saved! Do you wish to Continue?");
						
						if(choice == JOptionPane.YES_OPTION)
						{
							//clears the display
							clear();
							
							//Clears the String buffer after each save.
							strBufferObj.delete(0,strBufferObj.length());
							
							//save counter True to symbolize saved status.
							saveCounter = true;
						}
						
						//returns statement to avoid being added to the string command buffer
						return;
					}
					
				case "save":
					try
					{
						//Save Image
						File savedImage = new File("savedImage.png");
						BufferedImage bufferedImageObjSave  = getBufferedImage();
						ImageIO.write(bufferedImageObjSave,"png", savedImage);
						
						//Saves Command
						File savedCommand = new File("savedCommand.txt");
						FileWriter fWriterObj = new FileWriter(savedCommand);
						BufferedWriter bWriterObj = new BufferedWriter(fWriterObj);
						bWriterObj.write(strBufferObj.toString());
						bWriterObj.close();
						
						//Clears the String buffer after each save.
						strBufferObj.delete(0,strBufferObj.length());
						
						//save counter True to symbolize saved status.
						saveCounter = true;
						
						//save dialog box
						JOptionPane.showMessageDialog(null, "Image & command Saved!");
						
						//returns statement to avoid being added to the string command buffer
						return;						
					}
					catch(Exception e)
					{
						displayMessage("Error Saving Image");
					}	
					break;
					
				case "load":
					
					if(saveCounter == true)
					{
						try
						{	
							//reset turtle position.
							reset();
							penDown();
							
							//Load Image
							File loadImage = new File("savedImage.png");
							BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
							setBufferedImage(bufferedImageObjLoad);
							
							
							//load Saved Commands.
							File savedCommand = new File("savedCommand.txt");
							FileReader fReaderObj = new FileReader(savedCommand);
							BufferedReader bReaderObj = new BufferedReader(fReaderObj);
													
							String line = bReaderObj.readLine(); //reads the first line of command file.
							while(line != null)
							{	
								processCommand(line);
								line = bReaderObj.readLine();
							}
							bReaderObj.close();
							
							//save counter True to symbolize saved status.
							saveCounter = true;
							
							//returns statement to avoid being added to the string command buffer
							return;
						}
						catch(Exception e)
						{
							displayMessage("Error Loading Image");
						}
					}
					else
					{	
						//Non-Saved image case.
						
						int choice = JOptionPane.showConfirmDialog(null, "Current image/commands is not saved! Do you wish to Continue?");
						
						if(choice == JOptionPane.YES_OPTION)
						{
							//save counter True to symbolize saved status.
							saveCounter = true;
							
							//load the old image
							processCommand("load");
						}
						
						//returns statement to avoid being added to the string command buffer
						return;
					}
					break;
					
					
				case "square":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						square(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "squarecentered":
					//Centered version of square method.
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						squareCentered(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "pencolour":
					if(commandEntered.length==4)
					{
						//Case where parameter is given - command + value.
						penColour(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;
					
					
				case "penwidth":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						penWidth(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;	
					
					
				case "triangle":
					if(commandEntered.length == 2)
					{
						//Case where one parameter is given - command + value.
						triangle(enteredParameterValue[0]);
					}
					else if(commandEntered.length == 4)
					{
						//Case where three parameter are given - command + parameter list.
						triangle(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "hexagram":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						hexagram(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;
					
				case "hexagon":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						hexagon(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;
					
				case "octagram":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						octagram(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "octagon":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						octagon(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "circle":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						circle(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "rgbmodeon":
					rgbModeOn();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
					
				case "rgbmodeoff":
					rgbModeOff();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "colorchooser":
					colorChooser();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "mousemodeon":
					mouseModeBool = true;
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "mousemodeoff":
					mouseModeBool = false;
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "help":
					Help();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "tictactoe":
					//Tic Tac Toe - Them game.
					ticTacToe();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "tictactoeexit":
					//Tic Tac Toe - Them game escape.
					ticTacToeExit();
					
					//Avoids being added to the string buffer/ saved commands
					return;
			}
			
		}
		else
		{	
			//invalid Command Case.
			displayMessage("Invalid Command.");
		}
		
		
		//Commands Entered into string buffer
		strBufferObj.append(command+"\n");
		
		try
		{
			//Updates Help UI 
			currentColor.setBackground(getPenColour());
		}
		catch(Exception e)
		{
			//Does noting if Help window is not opened
		}
		
	}
	
	
	
	//inner classes
	//WindowListener for Main Frame.
	private class WindowListenerClass extends WindowAdapter
	{

		public void windowClosing(WindowEvent event)
		{
			
			if(saveCounter == true)
			{
				event.getWindow().dispose();
			}
			else
			{
				int result = JOptionPane.showConfirmDialog(null, "The current image is not saved, do you wish to exit?");
				
				if(result == JOptionPane.YES_OPTION)
				{
					event.getWindow().dispose();
				}
			}
			
		}

	}
	
	//MouseMotionListener class for Main Frame
	private class MouseMotionListenerClass extends MouseMotionAdapter
	{
		
		public void mouseMoved(MouseEvent mEvent)
		{	
			if(mouseModeBool == true)
			{
				//sets turtle positions relative to the mouse position
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnLeft(2);
				  
			}
		}
		
		public void mouseDragged(MouseEvent mEvent)
		{
			if(mouseModeBool == true)
			{
			    //sets turtle positions relative to the mouse position
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnRight(2);
				
				//gets the graphical context on the invocation frame
			    Graphics frameGraphicContext = getGraphicsContext();
			    
			    //setColor
			    frameGraphicContext.setColor(getPenColour());  
			    
			    //initial width set to 0 for fillRoundRect()
			    int penSize = (int) getStroke()+1;
			    
				//Drawing on the Turtle graphical context frame
				frameGraphicContext.fillRoundRect(mEvent.getX()-40,mEvent.getY()-40,penSize,penSize,penSize,penSize);
				
				//save counter False to symbolize Unsaved status as changes have been made..
				saveCounter = false;

			}
		}
		
	}
	
	//MouseMotionListener class for Main Frame
	private class MouseListenerClass extends MouseAdapter
	{
		public void mousePressed(MouseEvent mEvent)
		{
			if(mouseModeBool == true)
			{
				//Same as mouseDragged method but only executed every time the mouse is clicked.
				
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnRight(2);
				
				//gets the graphical context on the invocation frame
			    Graphics frameGraphicContext = getGraphicsContext();
			    
			    //setColor
			    frameGraphicContext.setColor(getPenColour());  
			    
			    //initial width set to 0 for fillRoundRect()
			    int penSize = (int) getStroke()+1;
			    
				//Drawing on the Turtle graphical context frame
				frameGraphicContext.fillRoundRect(mEvent.getX()-40,mEvent.getY()-40,penSize,penSize,penSize,penSize);
				
				//save counter False to symbolize Unsaved status as changes have been made..
				saveCounter = false;
			}
		}
		
		public void mouseClicked(MouseEvent mEvent)
		{
			//if TicTacToe is Started
			if(ticTacToeBoolean == true)
			{
				//mouse co-od
				int x = mEvent.getX();
				int y = mEvent.getY();
				
				//default position for turtle
				reset();
				penUp();
				penWidth(6);
				setxPos(600);
				setyPos(100);
				forward(1);


				if(x<=300 && x>200)
				{
					if(y<=150 && y>50)
					{
						//box 1
						if(ticTacToeBox[0] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[0] = 'o';
									
									setxPos(200);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[0] = 'x';
									
									drawLine(getPenColour(),200, 150, 300, 50);
									drawLine(getPenColour(),300, 150, 200, 50);
										
									
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[0] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=250 && y>150)
					{
						//box 2
						if(ticTacToeBox[1] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[1] = 'o';
									
									setxPos(200);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[1] = 'x';
									
									drawLine(getPenColour(),200, 250, 300, 150);
									drawLine(getPenColour(),300, 250, 200, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[1] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 3
						if(ticTacToeBox[2] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[2] = 'o';
									
									setxPos(200);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[2] = 'x';
									
									drawLine(getPenColour(),200, 350, 300, 250);
									drawLine(getPenColour(),300, 350, 200, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[2] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				else if(x<=400 && x>300)
				{
					if(y<=150 && y>50)
					{
						//box 4
						if(ticTacToeBox[3] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[3] = 'o';
									
									setxPos(300);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[3] = 'x';
									
									drawLine(getPenColour(),300, 150, 400, 50);
									drawLine(getPenColour(),400, 150, 300, 50);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[3] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=250 && y>150)
					{
						//box 5
						if(ticTacToeBox[4] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[4] = 'o';
									
									setxPos(300);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[4] = 'x';
									
									drawLine(getPenColour(),300, 250, 400, 150);
									drawLine(getPenColour(),400, 250, 300, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[4] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 6
						if(ticTacToeBox[5] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[5] = 'o';
									
									setxPos(300);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[5] = 'x';
									
									drawLine(getPenColour(),300, 350, 400, 250);
									drawLine(getPenColour(),400, 350, 300, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[5] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				else if(x<=500 && x>400)
				{
					if(y<=150 && y>50)
					{
						//box 7
						if(ticTacToeBox[6] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[6] = 'o';
									
									setxPos(400);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[6] = 'x';
									
									drawLine(getPenColour(),400, 150, 500, 50);
									drawLine(getPenColour(),500, 150, 400, 50);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[6] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
						
					}
					else if(y<=250 && y>150)
					{
						//box 8
						if(ticTacToeBox[7] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[7] = 'o';
									
									setxPos(400);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[7] = 'x';
									
									drawLine(getPenColour(),400, 250, 500, 150);
									drawLine(getPenColour(),500, 250, 400, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[7] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 9
						if(ticTacToeBox[8] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[8] = 'o';
									
									setxPos(400);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[8] = 'x';
									
									drawLine(getPenColour(),400, 350, 500, 250);
									drawLine(getPenColour(),500, 350, 400, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[8] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				int i=0;
				while(i<9)
				{
					if(ticTacToeBoxOwner[i] == 'o' && ticTacToeBoxOwner[1] == 'o' && ticTacToeBoxOwner[2]=='o')
					{
						JOptionPane.showMessageDialog(null, "Player Circle Wins!");
					}
					else if(ticTacToeBoxOwner[0] == 'x' && ticTacToeBoxOwner[1] == 'x' && ticTacToeBoxOwner[2]=='x')
					{
						JOptionPane.showMessageDialog(null, "Player Cross Wins!");
					}
					i+4

				}


			}
			
			
		}
	}
	
	//Listener classes for the Help menu
	//Slider Listener class for help menu
	private class SliderListenerClass implements ChangeListener
	{
		public void stateChanged(ChangeEvent e) 
		{
			penColour(rValue.getValue(),gValue.getValue(),bValue.getValue());
			currentColor.setBackground(getPenColour());
		}
	}
	
	//Windows Listener class for help menu
	private class HelpWindowListenerClass extends WindowAdapter
	{

		public void windowClosing(WindowEvent event)
		{
			//close MainFrame window
			event.getWindow().dispose();
		}
		
	}
	
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-05-11 05:04:31.714
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-05-11 05:04:31.714
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-11 05:04:33.599
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package graphicsProgramFinalAssignmentOOP;

import uk.ac.leedsbeckett.oop.LBUGraphics;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.*;
import java.awt.Dimension;
import java.awt.Graphics;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JOptionPane;
import javax.swing.JColorChooser;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.util.ArrayList;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;

import java.util.Random;

import java.sql.DriverManager;
import java.sql.Connection;


public class GraphicsSystem extends LBUGraphics
{	
	//Array of accepted commands.
	private String[] commandCollection = {"about","penup","pendown","turnleft","turnright","forward","backward","black","green","red","white","reset","clear","save","load","square","squarecentered","pencolour","penwidth","triangle","hexagram","hexagon","octagram","octagon","circle","rgbmodeon","rgbmodeoff","colorchooser","mousemodeon","mousemodeoff","help","tictactoe","tictactoeexit"};
	
	//save counter
	private boolean saveCounter = true;
	
	//Command Entered Buffer
	private StringBuffer strBufferObj = new StringBuffer();
	
	//RGB mode counter
	private boolean rgbModeBool = false;
	
	//Help menu
	private JFrame helpWindow;
	private JSlider rValue,gValue,bValue;
	private JPanel currentColor;
	
	//mouse mode counter
	private boolean mouseModeBool = false;
	
	//Tic Tac Toe - game mode one or off
	private boolean ticTacToeBoolean = false;
	
	//ticTacToe box occupied counter
	private boolean[] ticTacToeBox = new boolean[9];
	
	//ticTacToe Box occupied player
	private char[] ticTacToeBoxOwner = new char[9];
	
	//Player Turn
	//cross = x
	//circle = o
	//initial turn for circle
	private char turn = 'o';

	public static void main(String[] args)
	{
		try
		{
			//register driver.
			Class.forName("com.mysql.cj.jdbc.Driver");
			//establishing connection to check for Database availability.
			Connection co = DriverManager.getConnection("jdbc:mysql://localhost:3306/turtlegraphicdata","root","");
			//closing test connection.
			co.close();
			
			//Database login 
			new DatabaseLogin();
			
		}
		catch(Exception e)
		{
			//database link failure - automatically opens turtleGraphic.
			new GraphicsSystem();
		}


	}
	
	
	public GraphicsSystem()
	{
        JFrame MainFrame = new JFrame(); 
        MainFrame.setLocation(20,20);
        MainFrame.setLayout(new FlowLayout());    
        MainFrame.add(this);                       
        MainFrame.setSize(850,450);               
        MainFrame.setVisible(true);   
        MainFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        MainFrame.addWindowListener(new WindowListenerClass());
        MainFrame.addMouseMotionListener(new MouseMotionListenerClass());
        MainFrame.addMouseListener(new MouseListenerClass());
        
        
        //about();
        reset();
        penDown();
	}

	
	public void about()
	{
		//overriding the about method.
	
		try
		{
			File loadImage = new File("name.png");
			BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
			setBufferedImage(bufferedImageObjLoad);
		}
		catch(Exception e)
		{
			displayMessage("Error loading Name");
		}
		
		//calling the parent class about method.
		super.about();

	}
	
	public void square(int length)
	{	
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}

	}
	
	public void squareCentered(int length)
	{	
		//initial position.
		int xPos = getxPos();
		int yPos = getyPos();
		
		
		reset();
		forward(length/2);
		turnRight();
		forward(length/2);
		turnLeft();
		
		penDown();
		int i;
		for(i = 0;i<4;i++)
		{		
			turnLeft();
			forward(length);
		}
		
		//going back to the original position after this command has been issued.
		setxPos(xPos);
		setyPos(yPos);
		
		//fixing teleport issues.
		penUp();
		forward(0);
		penDown();
	}
	
	
	public void penColour(int colourR, int colourG, int colourB)
	{
		try
		{
			Color c = new Color(colourR,colourG,colourB);
			setPenColour(c);
		}
		catch(Exception e)
		{
			//In case our of bound arguments are given.
			displayMessage("Color parameter outside of expected range: Red:255 Green:255 Blue:255");
		}
	}
	
	
	public void penWidth(int width)
	{
		setStroke(width);
	}
	
	public void triangle(int length)
	{
		//Draws a triangle with equal sides.
		turnLeft();
		penDown();
			
		int i;
		for(i=0;i<3;i++)
		{
			
			forward(length);
			
			if(i<2)
			{
				turnLeft(120);
			}
			
		}
	}
	
	
	public void triangle(int lengthOne, int lengthTwo, int lengthThree)
	{	
		//overloading triangle function.
		//Draws a triangle with specific sides.
	
		double a,b,largestLengthC,angleA,angleB,angleC;
		
		if(lengthOne>lengthTwo && lengthOne>lengthThree)
		{
			//case where lengthOne is the largest
			
			a = lengthTwo;
			b = lengthThree;
			
			largestLengthC = lengthOne;
			
		}
		else if(lengthTwo>lengthOne && lengthTwo>lengthThree)
		{
			//case where lengthTwo is the largest
			a = lengthOne;
			b = lengthThree;
			
			largestLengthC = lengthTwo;
		}
		else
		{	
			//case where lengthThree is the largest
			a = lengthOne;
			b = lengthTwo;
			
			largestLengthC = lengthThree;
		}
		
				
		//Using Cosine Law to find the largest angle vai the longest side.
		//c^2 = a^2 + b^2 -2*a*b*Cos(angle)
		//Cos(angle) =  -(c^2 - (a^2+b^2)) / 2ab
		//angle = cos*-1( -(c^2 - (a^2+b^2)) / 2ab) )
		double value;
		value = -(Math.pow(largestLengthC, 2) - ( Math.pow(a, 2) + Math.pow(b, 2))) /(2*a*b) ;
		angleC = Math.toDegrees(Math.acos(value)); // returns the angleC degree
		
		//using Sine Law to find the other angles.
		//sideA/sinA = sideB/sinB = sideC/sinC
		//A = (sin(c)*a/c)sin^-1
		//B = (sin(c)*b/c)sin^-1
		angleA = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (a/largestLengthC) ) );
		angleB = Math.toDegrees( Math.asin( Math.sin(Math.toRadians(angleC)) * (b/largestLengthC) ) );
		
		turnLeft();
		forward((int) largestLengthC);
		
		turnLeft(180 - (int) angleB);
		forward((int) a);
		
		turnLeft(180 - (int) angleC );
		forward((int) b);
		
		turnLeft(180 - (int) angleA);
		
	}
	
	public void hexagram(int length)
	{
		//Heron's formula 
		//s = (a+b+c)/2
		//a = sq(s(s-a)(s-b)(s-c))
		double s = (length+length+length)/2;
		double areaOfTriangle = Math.sqrt(s*((s-length)*(s-length)*(s-length)));
		
		//h=(2*A)/b
		//can also be said to be the median
		double heightOfTriangle = (2*areaOfTriangle)/length;
		
		//the distance between the vertex and the centroid of a triangle is 2/3 of the median of the triangle.
		int midPoint = (int) (heightOfTriangle/3)*2;	
		
		triangle(length);
		turnLeft(120);
		turnLeft(30);
		penUp();
		forward((int) midPoint);
		forward((int) midPoint);
		penDown();
		turnLeft(150);
		forward(length);
		turnLeft(120);
		forward(length);
		turnLeft(120);
		forward(length);
	}
	
	public void hexagon(int length)
	{
		turnLeft();
		penDown();
		
		for(int i=0;i<=5;i++)
		{
			forward(length);
			turnLeft(60);
		}

	}
	
	public void octagram(int length)
	{
		square(length);
		
		//fixing position for 2nd sqaure.
		penUp();
		turnLeft();
		forward(length/2);
		turnLeft();
		forward(length/2);
		turnLeft(45);
		forward(length/2);
		turnLeft();
		forward(length/2);
		
		square(length);
	}
	
	public void octagon(int length)
	{
		turnLeft();
		penDown();
		
		for(int i=0;i<=7;i++)
		{
			forward(length);
			turnLeft(45);
		}
	}
	
	public void rgbModeOn()
	{
		int[] rgbValue = {255,255,255};
		Random randObj = new Random();
		
		rgbModeBool = true;
		
		//Loops through the RGB value until RGB mode is turned off.
		while(rgbModeBool == true)
		{
			int i = randObj.nextInt(0,3);
			
			if(rgbValue[i] == 255)
			{
				while(rgbValue[i] > 0)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					
					try
					{
						//Updates Help UI
						currentColor.setBackground(getPenColour());
					}
					catch(Exception e)
					{
						//In case Help UI is not visible
					}

					--rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 	
					catch (InterruptedException e) 
					{
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
			else if(rgbValue[i]==0)
			{
				while(rgbValue[i] < 255)
				{
					penColour(rgbValue[0],rgbValue[1],rgbValue[2]);
					
					try
					{
						//Updates Help UI
						currentColor.setBackground(getPenColour());
					}
					catch(Exception e)
					{
						//In case Help UI is not visible
					}
					
					++rgbValue[i];
					
					try 
					{
						Thread.sleep(5);
					} 
					catch (InterruptedException e) 
					{
						e.printStackTrace();
					}
					
					if(rgbModeBool == false)
					{
						break;
					}
				}
			}
		}
		
	}
	
	public void rgbModeOff()
	{
		//Turns off RGB mode.
		rgbModeBool = false;
	}
	
	public void colorChooser()
	{
		Color newColor = JColorChooser.showDialog(null,"Choose Color", getPenColour());
		setPenColour(newColor);
		
		try
		{
			//Updates Help UI 
			currentColor.setBackground(getPenColour());
		}
		catch(Exception e)
		{
			//Does noting if Help window is not opened
		}
	}
	
	public void Help()
	{
		
		try
		{	
			//closes Help window if it already exists
			helpWindow.dispose();
		}
		catch(Exception e)
		{
			
		}
		
		//Help window MainFrame
		helpWindow = new JFrame("Help Window");
		helpWindow.setLocation(860,20);
		helpWindow.setVisible(true);
		helpWindow.setSize(600,600);
		helpWindow.setLayout(new FlowLayout());
		helpWindow.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		helpWindow.addWindowListener(new HelpWindowListenerClass());
		
		//command list panel
		JPanel commandList = new JPanel();
		commandList.setPreferredSize(new Dimension(200,600));
		commandList.setLayout(new BoxLayout(commandList,BoxLayout.Y_AXIS));
		
		//an Array of JLabel class references
		JLabel[] commandAvailable = new JLabel[commandCollection.length];
		
		for(int i=0;i<commandCollection.length;i++)
		{
			//referencing each reference variable with an JLabel object.
			//Specifies each JLabel object with Command names.
			commandAvailable[i] = new JLabel();
			commandAvailable[i].setText(i+1+". "+commandCollection[i]);
			commandAvailable[i].setPreferredSize(new Dimension(200,50));
			
			//adds each JLabel object into commandList panel, one by one.
			commandList.add(commandAvailable[i]);
		}
		
		
		//UI panel
		JPanel helpUI = new JPanel();
		helpUI.setPreferredSize(new Dimension(400,600));
		helpUI.setLayout(new BoxLayout(helpUI,BoxLayout.Y_AXIS));
		
		//RGB value slider
		rValue = new JSlider(JSlider.HORIZONTAL,0,255,255);
		rValue.setPaintTicks(true);
		rValue.setPaintLabels(true);
		rValue.setMajorTickSpacing(51);
		rValue.addChangeListener(new SliderListenerClass());
		
		gValue = new JSlider(JSlider.HORIZONTAL,0,255,0);
		gValue.setPaintTicks(true);
		gValue.setPaintLabels(true);
		gValue.setMajorTickSpacing(51);
		gValue.addChangeListener(new SliderListenerClass());
		
		bValue = new JSlider(JSlider.HORIZONTAL,0,255,0);
		bValue.setPaintTicks(true);
		bValue.setPaintLabels(true);
		bValue.setMajorTickSpacing(51);
		bValue.addChangeListener(new SliderListenerClass());
		
		//adding sliders into HelpUI panel
		helpUI.add(new JLabel("R"));
		helpUI.add(rValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		helpUI.add(new JLabel("G"));
		helpUI.add(gValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		helpUI.add(new JLabel("B"));
		helpUI.add(bValue);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		
		//CurrentColor checker
		currentColor = new JPanel();
		currentColor.setPreferredSize(new Dimension(50,50));
		currentColor.setBackground(getPenColour());
		currentColor.setBorder(BorderFactory.createLoweredBevelBorder());
		
		//adding current color panel to helpUI panel
		helpUI.add(currentColor);
		helpUI.add(Box.createRigidArea(new Dimension(400,30)));
		
		//Adding helpUI & commandList panels into the Main frame
		helpWindow.getContentPane().add(commandList);
		helpWindow.getContentPane().add(helpUI);
		helpWindow.pack();
	}
	
	public void ticTacToe()
	{
		clear();
		
		//indicating the game is called.
		ticTacToeBoolean = true;
		
		for(int i=0;i<ticTacToeBox.length;i++)
		{
			//setting all ticTacToeBox references false for initial game starting
			//indicates weather it is occupied or not.
			ticTacToeBox[i] = false;
		}
		
		for(int i=0;i<ticTacToeBoxOwner.length;i++)
		{
			//setting all ticTacToeBoxOwner references as null-'n' for initial game starting.
			ticTacToeBoxOwner[i] = 'n';
		}
		
		penDown();
		penWidth(6);
		setPenColour(Color.white);
		//each position area is of 100*100
		
		//vertical line
		setxPos(300);
		setyPos(50);
		forward(300);
		
		setxPos(400);
		setyPos(50);
		forward(300);
		
		//horizontal line
		setxPos(200);
		setyPos(150);
		turnLeft();
		forward(300);
		
		setxPos(200);
		setyPos(250);
		forward(300);
		
		//default position for turtle
		reset();
		penUp();
		penWidth(6);
		setxPos(600);
		setyPos(100);
		forward(1);
		setTurtleSpeed(0);
		
		
	}
	
	public void ticTacToeExit()
	{
		//indicating the game has ended.
		
		if(ticTacToeBoolean == true)
		{
			//only execute if the game is running
			ticTacToeBoolean = false;
			
			
			clear();
			reset();
			penDown();
		}
		
		//resets the speed to normal
		setTurtleSpeed(1);

	}
	
	
	public void processCommand(String command)
	{	
		//Prints the Command Entered.
		displayMessage("Command Entered: "+command);
		
		//Splitting Entered Command into An array of String objects.
		String[] commandEntered = command.split(" ");
		
		//Method parameter values.
		int[] enteredParameterValue = new int[3];
		
		//Collection Class ArrayList for accepted commands.
		ArrayList acceptedCommandCollection = new ArrayList();
		
		for(String i: commandCollection)
		{	
			//Adding Accepted Commands
			acceptedCommandCollection.add(i);
		}
		
		
		//Command validation is done first.
		//parameter validation is done second.
		if(acceptedCommandCollection.contains(commandEntered[0].toLowerCase()))
		{
			//Valid Command Case.
			
			//Case where too many parameters are entered.
			if(commandEntered.length>4)
			{	
				displayMessage("Too many parameters entered.");
				
				//Ends function Execution in case of error.
				return;
			}
			
			//Parameter Filtering & conversion.
			switch(commandEntered.length)
			{		
				case 2:
					//One parameter Case
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
					
				case 3:
					//two parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;
								
				case 4:	
					//Three parameter Case.
					try
					{
						//Converting Entered String parameter into integer value.
						enteredParameterValue[0] = Integer.parseInt(commandEntered[1]);
						enteredParameterValue[1] = Integer.parseInt(commandEntered[2]);
						enteredParameterValue[2] = Integer.parseInt(commandEntered[3]);
					}
					catch(NumberFormatException exceptionName)
					{
						displayMessage("Non numeric data for parameter.");
						
						//Ends function Execution in case of error.
						return;
					}
					finally
					{
						//negative or non sensible values validation.
						if(enteredParameterValue[0]<0 || enteredParameterValue[1]<0 || enteredParameterValue[2]<0)
						{
							displayMessage("Negative or non sensible value is entered.");
							
							//Ends function Execution in case of negative or non sensible values.
							return;
						}
					}
					break;		
			}
			
			
			
			//Command filtering.
			switch(commandEntered[0].toLowerCase())
			{
				case "about":
					about();
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "reset":
					setxPos(400);
					setyPos(200);
					reset();
					penColour(255,0,0);
					break;
					
				case "penup":
					penUp();
					break;
					
				case "pendown":
					penDown();
					break;
					
				case "turnleft":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnLeft(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnLeft();
					}
					break;
					
				case "turnright":
					
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						turnRight(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						turnRight();
					}				
					break;
					
				case "forward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "backward":
					if(commandEntered.length>1)
					{
						//Case where 2 parameter are given - command + value.
						forward(enteredParameterValue[0]-(enteredParameterValue[0]*2));
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made.
					saveCounter = false;
					break;
					
				case "black":					
					//Sets pen color to black.
					setPenColour(Color.black);
					break;
					
				case "green":
					//Sets pen color to green.
					setPenColour(Color.green);
					break;
					
				case "red":				
					//Sets pen color to red.
					setPenColour(Color.red);			
					break;
					
				case "white":
					//Sets pen color to white.
					setPenColour(Color.white);					
					break;
					
				case "clear":
					if(saveCounter == true)
					{
						//Clears the display
						clear();
						
						//Clears the String buffer.
						strBufferObj.delete(0,strBufferObj.length());
						
						return;
					}
					else
					{
						//Non-Saved image case.
						
						int choice = JOptionPane.showConfirmDialog(null, "Current image/commands is not saved! Do you wish to Continue?");
						
						if(choice == JOptionPane.YES_OPTION)
						{
							//clears the display
							clear();
							
							//Clears the String buffer after each save.
							strBufferObj.delete(0,strBufferObj.length());
							
							//save counter True to symbolize saved status.
							saveCounter = true;
						}
						
						//returns statement to avoid being added to the string command buffer
						return;
					}
					
				case "save":
					try
					{
						//Save Image
						File savedImage = new File("savedImage.png");
						BufferedImage bufferedImageObjSave  = getBufferedImage();
						ImageIO.write(bufferedImageObjSave,"png", savedImage);
						
						//Saves Command
						File savedCommand = new File("savedCommand.txt");
						FileWriter fWriterObj = new FileWriter(savedCommand);
						BufferedWriter bWriterObj = new BufferedWriter(fWriterObj);
						bWriterObj.write(strBufferObj.toString());
						bWriterObj.close();
						
						//Clears the String buffer after each save.
						strBufferObj.delete(0,strBufferObj.length());
						
						//save counter True to symbolize saved status.
						saveCounter = true;
						
						//save dialog box
						JOptionPane.showMessageDialog(null, "Image & command Saved!");
						
						//returns statement to avoid being added to the string command buffer
						return;						
					}
					catch(Exception e)
					{
						displayMessage("Error Saving Image");
					}	
					break;
					
				case "load":
					
					if(saveCounter == true)
					{
						try
						{	
							//reset turtle position.
							reset();
							penDown();
							
							//Load Image
							File loadImage = new File("savedImage.png");
							BufferedImage bufferedImageObjLoad = ImageIO.read(loadImage);
							setBufferedImage(bufferedImageObjLoad);
							
							
							//load Saved Commands.
							File savedCommand = new File("savedCommand.txt");
							FileReader fReaderObj = new FileReader(savedCommand);
							BufferedReader bReaderObj = new BufferedReader(fReaderObj);
													
							String line = bReaderObj.readLine(); //reads the first line of command file.
							while(line != null)
							{	
								processCommand(line);
								line = bReaderObj.readLine();
							}
							bReaderObj.close();
							
							//save counter True to symbolize saved status.
							saveCounter = true;
							
							//returns statement to avoid being added to the string command buffer
							return;
						}
						catch(Exception e)
						{
							displayMessage("Error Loading Image");
						}
					}
					else
					{	
						//Non-Saved image case.
						
						int choice = JOptionPane.showConfirmDialog(null, "Current image/commands is not saved! Do you wish to Continue?");
						
						if(choice == JOptionPane.YES_OPTION)
						{
							//save counter True to symbolize saved status.
							saveCounter = true;
							
							//load the old image
							processCommand("load");
						}
						
						//returns statement to avoid being added to the string command buffer
						return;
					}
					break;
					
					
				case "square":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						square(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "squarecentered":
					//Centered version of square method.
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						squareCentered(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "pencolour":
					if(commandEntered.length==4)
					{
						//Case where parameter is given - command + value.
						penColour(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;
					
					
				case "penwidth":
					if(commandEntered.length>1)
					{
						//Case where parameter is given - command + value.
						penWidth(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					break;	
					
					
				case "triangle":
					if(commandEntered.length == 2)
					{
						//Case where one parameter is given - command + value.
						triangle(enteredParameterValue[0]);
					}
					else if(commandEntered.length == 4)
					{
						//Case where three parameter are given - command + parameter list.
						triangle(enteredParameterValue[0], enteredParameterValue[1], enteredParameterValue[2]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "hexagram":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						hexagram(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;
					
				case "hexagon":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						hexagon(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;
					
				case "octagram":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						octagram(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "octagon":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						octagon(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
					
				case "circle":
					if(commandEntered.length >= 2)
					{
						//Case where one parameter is given - command + value.
						circle(enteredParameterValue[0]);
					}
					else
					{
						//case where no parameter is given.
						displayMessage("Valid command with missing parameter.");
					}
					
					//save counter False to symbolize Unsaved status as changes have been made..
					saveCounter = false;
					break;	
					
				case "rgbmodeon":
					rgbModeOn();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
					
				case "rgbmodeoff":
					rgbModeOff();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "colorchooser":
					colorChooser();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "mousemodeon":
					mouseModeBool = true;
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "mousemodeoff":
					mouseModeBool = false;
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "help":
					Help();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "tictactoe":
					//Tic Tac Toe - Them game.
					ticTacToe();
					
					//Avoids being added to the string buffer/ saved commands
					return;
					
				case "tictactoeexit":
					//Tic Tac Toe - Them game escape.
					ticTacToeExit();
					
					//Avoids being added to the string buffer/ saved commands
					return;
			}
			
		}
		else
		{	
			//invalid Command Case.
			displayMessage("Invalid Command.");
		}
		
		
		//Commands Entered into string buffer
		strBufferObj.append(command+"\n");
		
		try
		{
			//Updates Help UI 
			currentColor.setBackground(getPenColour());
		}
		catch(Exception e)
		{
			//Does noting if Help window is not opened
		}
		
	}
	
	
	
	//inner classes
	//WindowListener for Main Frame.
	private class WindowListenerClass extends WindowAdapter
	{

		public void windowClosing(WindowEvent event)
		{
			
			if(saveCounter == true)
			{
				event.getWindow().dispose();
			}
			else
			{
				int result = JOptionPane.showConfirmDialog(null, "The current image is not saved, do you wish to exit?");
				
				if(result == JOptionPane.YES_OPTION)
				{
					event.getWindow().dispose();
				}
			}
			
		}

	}
	
	//MouseMotionListener class for Main Frame
	private class MouseMotionListenerClass extends MouseMotionAdapter
	{
		
		public void mouseMoved(MouseEvent mEvent)
		{	
			if(mouseModeBool == true)
			{
				//sets turtle positions relative to the mouse position
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnLeft(2);
				  
			}
		}
		
		public void mouseDragged(MouseEvent mEvent)
		{
			if(mouseModeBool == true)
			{
			    //sets turtle positions relative to the mouse position
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnRight(2);
				
				//gets the graphical context on the invocation frame
			    Graphics frameGraphicContext = getGraphicsContext();
			    
			    //setColor
			    frameGraphicContext.setColor(getPenColour());  
			    
			    //initial width set to 0 for fillRoundRect()
			    int penSize = (int) getStroke()+1;
			    
				//Drawing on the Turtle graphical context frame
				frameGraphicContext.fillRoundRect(mEvent.getX()-40,mEvent.getY()-40,penSize,penSize,penSize,penSize);
				
				//save counter False to symbolize Unsaved status as changes have been made..
				saveCounter = false;

			}
		}
		
	}
	
	//MouseMotionListener class for Main Frame
	private class MouseListenerClass extends MouseAdapter
	{
		public void mousePressed(MouseEvent mEvent)
		{
			if(mouseModeBool == true)
			{
				//Same as mouseDragged method but only executed every time the mouse is clicked.
				
				setxPos(mEvent.getX()-40);
				setyPos(mEvent.getY()-40);
				turnRight(2);
				
				//gets the graphical context on the invocation frame
			    Graphics frameGraphicContext = getGraphicsContext();
			    
			    //setColor
			    frameGraphicContext.setColor(getPenColour());  
			    
			    //initial width set to 0 for fillRoundRect()
			    int penSize = (int) getStroke()+1;
			    
				//Drawing on the Turtle graphical context frame
				frameGraphicContext.fillRoundRect(mEvent.getX()-40,mEvent.getY()-40,penSize,penSize,penSize,penSize);
				
				//save counter False to symbolize Unsaved status as changes have been made..
				saveCounter = false;
			}
		}
		
		public void mouseClicked(MouseEvent mEvent)
		{
			//if TicTacToe is Started
			if(ticTacToeBoolean == true)
			{
				//mouse co-od
				int x = mEvent.getX();
				int y = mEvent.getY();
				
				//default position for turtle
				reset();
				penUp();
				penWidth(6);
				setxPos(600);
				setyPos(100);
				forward(1);


				if(x<=300 && x>200)
				{
					if(y<=150 && y>50)
					{
						//box 1
						if(ticTacToeBox[0] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[0] = 'o';
									
									setxPos(200);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[0] = 'x';
									
									drawLine(getPenColour(),200, 150, 300, 50);
									drawLine(getPenColour(),300, 150, 200, 50);
										
									
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[0] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=250 && y>150)
					{
						//box 2
						if(ticTacToeBox[1] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[1] = 'o';
									
									setxPos(200);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[1] = 'x';
									
									drawLine(getPenColour(),200, 250, 300, 150);
									drawLine(getPenColour(),300, 250, 200, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[1] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 3
						if(ticTacToeBox[2] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[2] = 'o';
									
									setxPos(200);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[2] = 'x';
									
									drawLine(getPenColour(),200, 350, 300, 250);
									drawLine(getPenColour(),300, 350, 200, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[2] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				else if(x<=400 && x>300)
				{
					if(y<=150 && y>50)
					{
						//box 4
						if(ticTacToeBox[3] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[3] = 'o';
									
									setxPos(300);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[3] = 'x';
									
									drawLine(getPenColour(),300, 150, 400, 50);
									drawLine(getPenColour(),400, 150, 300, 50);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[3] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=250 && y>150)
					{
						//box 5
						if(ticTacToeBox[4] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[4] = 'o';
									
									setxPos(300);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[4] = 'x';
									
									drawLine(getPenColour(),300, 250, 400, 150);
									drawLine(getPenColour(),400, 250, 300, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[4] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 6
						if(ticTacToeBox[5] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[5] = 'o';
									
									setxPos(300);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[5] = 'x';
									
									drawLine(getPenColour(),300, 350, 400, 250);
									drawLine(getPenColour(),400, 350, 300, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[5] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				else if(x<=500 && x>400)
				{
					if(y<=150 && y>50)
					{
						//box 7
						if(ticTacToeBox[6] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[6] = 'o';
									
									setxPos(400);
									setyPos(150);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[6] = 'x';
									
									drawLine(getPenColour(),400, 150, 500, 50);
									drawLine(getPenColour(),500, 150, 400, 50);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[6] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
						
					}
					else if(y<=250 && y>150)
					{
						//box 8
						if(ticTacToeBox[7] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[7] = 'o';
									
									setxPos(400);
									setyPos(250);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[7] = 'x';
									
									drawLine(getPenColour(),400, 250, 500, 150);
									drawLine(getPenColour(),500, 250, 400, 150);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[7] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
					else if(y<=350 && y>250)
					{
						//box 9
						if(ticTacToeBox[8] == false)
						{
							//Unused box case
							switch(turn)
							{
								case 'o':
									//circle's turn
									ticTacToeBoxOwner[8] = 'o';
									
									setxPos(400);
									setyPos(350);
									turnLeft();
									forward(50);
									turnLeft();
									forward(50);
									
									penDown();
									circle(30);
									
									//next turn for cross
									turn = 'x';
									break;
									

								case 'x':
									//cross's turn
									ticTacToeBoxOwner[8] = 'x';
									
									drawLine(getPenColour(),400, 350, 500, 250);
									drawLine(getPenColour(),500, 350, 400, 250);
										
									//next turn for circle
									turn = 'o';
									break;	
							}
							
							//symbolize used
							ticTacToeBox[8] = true;
							
						}
						else
						{
							//box already in use
							JOptionPane.showMessageDialog(null, "Already selected!");
						}
					}
				}
				
				int i=0;
				while(i<9)
				{
					if(ticTacToeBoxOwner[i] == 'o' && ticTacToeBoxOwner[1] == 'o' && ticTacToeBoxOwner[2]=='o')
					{
						JOptionPane.showMessageDialog(null, "Player Circle Wins!");
					}
					else if(ticTacToeBoxOwner[0] == 'x' && ticTacToeBoxOwner[1] == 'x' && ticTacToeBoxOwner[2]=='x')
					{
						JOptionPane.showMessageDialog(null, "Player Cross Wins!");
					}
					i+4

				}


			}
			
			
		}
	}
	
	//Listener classes for the Help menu
	//Slider Listener class for help menu
	private class SliderListenerClass implements ChangeListener
	{
		public void stateChanged(ChangeEvent e) 
		{
			penColour(rValue.getValue(),gValue.getValue(),bValue.getValue());
			currentColor.setBackground(getPenColour());
		}
	}
	
	//Windows Listener class for help menu
	private class HelpWindowListenerClass extends WindowAdapter
	{

		public void windowClosing(WindowEvent event)
		{
			//close MainFrame window
			event.getWindow().dispose();
		}
		
	}
	
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-05-11 05:04:33.601
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-05-11 05:04:33.601
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3533)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3116)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2023-05-11 21:15:47.095 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-11 21:15:50.391
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-11 21:16:09.118
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-11 21:16:16.237
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-11 21:16:16.237
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-11 21:16:16.237
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-11 21:16:20.506
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-12 00:38:40.089 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-12 00:38:43.044
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-12 00:38:48.616
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-12 00:38:54.525
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-12 00:38:54.526
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-12 00:38:54.526
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-12 00:38:58.467
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-12 01:18:32.410 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-12 01:18:33.227
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-12 01:18:34.905
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-12 01:18:36.020
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-12 01:18:36.020
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-12 01:18:36.020
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-12 01:18:38.714
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-12 19:34:08.125 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-12 19:34:11.103
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-12 19:34:16.203
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-12 19:34:22.027
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-12 19:34:22.027
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-12 19:34:22.027
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-12 19:34:26.131
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-12 20:16:43.723 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-12 20:16:44.568
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-12 20:16:47.500
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-12 20:16:48.787
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-12 20:16:48.787
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-12 20:16:48.787
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-12 20:16:51.533
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-12 22:52:50.480 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-12 22:52:53.139
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-12 22:53:19.154
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-12 22:53:24.383
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-12 22:53:24.384
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-12 22:53:24.384
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-12 22:53:27.866
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-13 04:05:35.752 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-13 04:05:36.556
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-13 04:05:38.737
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-13 04:05:39.813
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-13 04:05:39.813
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-13 04:05:39.813
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-13 04:05:42.449
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-13 16:11:07.467 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-13 16:11:10.181
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-13 16:11:14.836
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-13 16:11:20.478
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-13 16:11:20.478
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-13 16:11:20.478
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-13 16:11:24.163
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-13 18:54:35.559 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-13 18:54:38.070
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-13 18:54:45.306
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-13 18:54:50.467
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-13 18:54:50.467
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-13 18:54:50.467
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-13 18:54:53.569
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-13 19:50:23.550 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-13 19:50:24.525
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-13 19:50:27.201
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-13 19:50:28.595
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-13 19:50:28.595
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-13 19:50:28.595
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-13 19:50:32.031
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-14 01:15:59.447 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 01:16:00.545
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 01:16:03.569
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-14 01:16:05.145
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 01:16:05.146
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 01:16:05.146
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-14 01:16:09.229
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-14 01:46:43.510 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 01:46:44.367
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 01:46:46.724
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-14 01:46:47.873
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 01:46:47.873
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 01:46:47.873
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-14 01:46:50.556
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-14 02:32:39.905 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 02:32:40.781
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 02:32:45.161
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-14 02:32:47.057
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 02:32:47.057
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 02:32:47.057
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-14 02:32:49.985
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-14 03:52:49.885 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 03:52:50.682
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 03:52:54.386
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-14 03:52:55.492
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 03:52:55.492
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 03:52:55.492
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-14 03:52:58.208
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-14 05:07:32.645 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 05:07:33.516
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 05:07:35.378
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-14 05:07:36.575
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 05:07:36.575
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 05:07:36.575
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-14 05:07:39.742
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-14 22:42:02.562 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 22:42:05.904
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 22:42:11.594
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-14 22:42:18.429
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 22:42:18.429
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 22:42:18.429
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-14 22:42:23.227
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-14 23:27:46.284 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 23:27:47.186
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 23:27:49.730
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-14 23:27:51.157
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 23:27:51.157
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 23:27:51.157
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-14 23:27:54.494
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-14 23:33:25.323 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 23:33:26.341
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-14 23:33:28.656
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-14 23:33:30.158
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 23:33:30.158
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-14 23:33:30.158
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-14 23:33:33.476
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-05-16 05:28:54.857 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=19.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-05-16 05:28:57.500
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-05-16 05:29:00.977
!MESSAGE Logback config file: C:\Birajan\The_British_College\TBC Bsc_Computing Sem4 L4\OOP Object Oriented Programming\OOP_Final_Assignment\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2023-05-16 05:29:06.541
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-16 05:29:06.541
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-05-16 05:29:06.541
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-05-16 05:29:10.361
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Asus'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.core.jobs 4 2 2023-05-16 05:29:29.510
!MESSAGE An internal error occurred during: "https://www.eclipse.org/setups/setups.zip".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.osgi.framework.BundleContext.createFilter(String)" because "context" is null
	at org.osgi.util.tracker.ServiceTracker.<init>(ServiceTracker.java:187)
	at org.osgi.util.tracker.ServiceTracker.<init>(ServiceTracker.java:250)
	at org.eclipse.ecf.internal.provider.filetransfer.httpclient5.Activator.getLogService(Activator.java:202)
	at org.eclipse.ecf.internal.provider.filetransfer.httpclient5.Activator.log(Activator.java:213)
	at org.eclipse.ecf.provider.filetransfer.httpclient5.HttpClientRetrieveFileTransfer.hardClose(HttpClientRetrieveFileTransfer.java:200)
	at org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1.performFileTransfer(AbstractRetrieveFileTransfer.java:199)
	at org.eclipse.ecf.filetransfer.FileTransferJob.run(FileTransferJob.java:76)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.core.jobs 2 2 2023-05-16 05:29:30.387
!MESSAGE Job found still running after platform shutdown.  Jobs should be canceled by the plugin that scheduled them during shutdown: org.eclipse.oomph.internal.ui.EarlyStart$1
